{"version":3,"file":"leaflet-baselayers.directive.js","sources":["../../../../src/leaflet/layers/base/leaflet-baselayers.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tDirective, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy,\n\tOnInit, Output\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n\n\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\n@Directive({\n\tselector: '[leafletBaseLayers]'\n})\nexport class LeafletBaseLayersDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Base Layers\n\tbaseLayersValue: { [name: string]: Layer };\n\n\t// Base Layers Map Differ\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\n\t// Set/get baseLayers\n\t@Input('leafletBaseLayers')\n\tset baseLayers(v: { [name: string]: Layer }) {\n\t\tthis.baseLayersValue = v;\n\n\t\tthis.updateBaseLayers();\n\t}\n\tget baseLayers(): { [name: string]: Layer } {\n\t\treturn this.baseLayersValue;\n\t}\n\n\t// Control Options\n\t@Input('leafletLayersControlOptions') layersControlOptions: Control.LayersOptions;\n\n\t// Output for once the layers control is ready\n\t@Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n\t// Active Base Layer\n\tprivate baseLayer: Layer;\n\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.baseLayers = {};\n\t\tthis.controlLayers.getLayersControl().remove();\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Create the control outside angular to prevent events from triggering chnage detection\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Initially configure the controlLayers\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t});\n\n\t\tthis.updateBaseLayers();\n\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateBaseLayers();\n\t}\n\n\tprotected updateBaseLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl && null != this.baseLayersDiffer) {\n\t\t\tconst changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n\t\t\tconst results = this.controlLayers.applyBaseLayerChanges(changes);\n\n\t\t\tif (results.changed()) {\n\t\t\t\tthis.syncBaseLayer();\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Check the current base layer and change it to the new one if necessary\n\t */\n\tprotected syncBaseLayer() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layers = LeafletUtil.mapToArray(this.baseLayers);\n\t\tlet foundLayer: Layer;\n\n\t\t// Search all the layers in the map to see if we can find them in the baselayer array\n\t\tmap.eachLayer((l: Layer) => {\n\t\t\tfoundLayer = layers.find((bl) => (l === bl));\n\t\t});\n\n\t\t// Did we find the layer?\n\t\tif (null != foundLayer) {\n\t\t\t// Yes - set the baselayer to the one we found\n\t\t\tthis.baseLayer = foundLayer;\n\t\t}\n\t\telse {\n\t\t\t// No - set the baselayer to the first in the array and add it to the map\n\t\t\tif (layers.length > 0) {\n\t\t\t\tthis.baseLayer = layers[0];\n\n\t\t\t\t// Add layers outside of angular to prevent events from triggering change detection\n\t\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\t\tthis.baseLayer.addTo(map);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}\n}\n"]}