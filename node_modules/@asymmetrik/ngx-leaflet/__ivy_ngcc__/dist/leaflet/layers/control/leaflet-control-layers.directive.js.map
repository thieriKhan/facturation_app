{"version":3,"file":"leaflet-control-layers.directive.js","sources":["../../../../src/leaflet/layers/control/leaflet-control-layers.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tDirective, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit,\n\tOutput\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n\n\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Control Layers Configuration\n\tlayersControlConfigValue: LeafletControlLayersConfig;\n\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\toverlaysDiffer: KeyValueDiffer<string, Layer>;\n\n\t@Input('leafletLayersControl')\n\tset layersControlConfig(v: LeafletControlLayersConfig) {\n\n\t\t// Validation/init stuff\n\t\tif (null == v) { v = new LeafletControlLayersConfig(); }\n\t\tif (null == v.baseLayers) { v.baseLayers = {}; }\n\t\tif (null == v.overlays) { v.overlays = {}; }\n\n\t\t// Store the value\n\t\tthis.layersControlConfigValue = v;\n\n\t\t// Update the map\n\t\tthis.updateLayers();\n\n\t}\n\tget layersControlConfig(): LeafletControlLayersConfig {\n\t\treturn this.layersControlConfigValue;\n\t}\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\t@Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\n\t\t// Generate differs\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t\tthis.overlaysDiffer = this.differs.find({}).create<string, Layer>();\n\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up control outside of angular to avoid change detection when using the control\n\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t// Set up all the initial settings\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\n\t\t});\n\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.layersControlConfig = { baseLayers: {}, overlays: {} };\n\t\tthis.controlLayers.getLayersControl().remove();\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tprotected updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl) {\n\n\t\t\t// Run the baselayers differ\n\t\t\tif (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n\t\t\t\tconst changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n\t\t\t\tthis.controlLayers.applyBaseLayerChanges(changes);\n\t\t\t}\n\n\t\t\t// Run the overlays differ\n\t\t\tif (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n\t\t\t\tconst changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n\t\t\t\tthis.controlLayers.applyOverlayChanges(changes);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n"]}