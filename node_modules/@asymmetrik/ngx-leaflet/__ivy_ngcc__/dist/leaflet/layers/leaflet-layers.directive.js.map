{"version":3,"file":"leaflet-layers.directive.js","sources":["../../../src/leaflet/layers/leaflet-layers.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, DoCheck, Input, IterableDiffer, IterableDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';\n\nimport { Layer} from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n\n\n/**\n * Layers directive\n *\n * This directive is used to directly control map layers. As changes are made to the input array of\n * layers, the map is synched to the array. As layers are added or removed from the input array, they\n * are also added or removed from the map. The input array is treated as immutable. To detect changes,\n * you must change the array instance.\n *\n * Important Note: The input layers array is assumed to be immutable. This means you need to use an\n * immutable array implementation or create a new copy of your array when you make changes, otherwise\n * this directive won't detect the change. This is by design. It's for performance reasons. Change\n * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which\n * is extremely expensive from a time complexity perspective.\n *\n */\n@Directive({\n\tselector: '[leafletLayers]'\n})\nexport class LeafletLayersDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Array of configured layers\n\tlayersValue: Layer[];\n\n\t// Differ to do change detection on the array\n\tlayersDiffer: IterableDiffer<Layer>;\n\n\t// Set/get the layers\n\t@Input('leafletLayers')\n\tset layers(v: Layer[]) {\n\t\tthis.layersValue = v;\n\n\t\t// Now that we have a differ, do an immediate layer update\n\t\tthis.updateLayers();\n\t}\n\tget layers(): Layer[] {\n\t\treturn this.layersValue;\n\t}\n\n\t// Wrapper for the leaflet directive (manages the parent directive)\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: IterableDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.layersDiffer = this.differs.find([]).create<Layer>();\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Update layers once the map is ready\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.layers = [];\n\t}\n\n\t/**\n\t * Update the state of the layers.\n\t * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\n\t * This is important because it allows us to react to changes to the contents of the array as well\n\t * as changes to the actual array instance.\n\t */\n\tprivate updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\n\t\tif (null != map && null != this.layersDiffer) {\n\n\t\t\tconst changes = this.layersDiffer.diff(this.layersValue);\n\t\t\tif (null != changes) {\n\n\t\t\t\t// Run outside angular to ensure layer events don't trigger change detection\n\t\t\t\tthis.zone.runOutsideAngular(() => {\n\n\t\t\t\t\tchanges.forEachRemovedItem((c) => {\n\t\t\t\t\t\tmap.removeLayer(c.item);\n\t\t\t\t\t});\n\t\t\t\t\tchanges.forEachAddedItem((c) => {\n\t\t\t\t\t\tmap.addLayer(c.item);\n\t\t\t\t\t});\n\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n"]}