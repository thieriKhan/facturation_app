import { __decorate, __metadata } from 'tslib';
import deepEqual from 'fast-deep-equal';
import { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core';
import { Calendar } from '@fullcalendar/core';

import * as ɵngcc0 from '@angular/core';
const hasOwnProperty = Object.prototype.hasOwnProperty;
/*
Really simple clone utility. Only copies plain arrays, objects, and Dates. Transfers everything else as-is.
Wanted to use a third-party lib, but none did exactly this.
*/
function deepCopy(input) {
    if (Array.isArray(input)) {
        return input.map(deepCopy);
    }
    else if (input instanceof Date) {
        return new Date(input.valueOf());
    }
    else if (typeof input === 'object' && input) { // non-null object
        return mapHash(input, deepCopy);
    }
    else { // everything else (null, function, etc)
        return input;
    }
}
function mapHash(input, func) {
    const output = {};
    for (const key in input) {
        if (hasOwnProperty.call(input, key)) {
            output[key] = func(input[key], key);
        }
    }
    return output;
}

/*
the docs point to this file as an index of options.
when this files is moved, update the docs.
*/
const INPUT_NAMES = [
    'header',
    'footer',
    'customButtons',
    'buttonIcons',
    'themeSystem',
    'bootstrapFontAwesome',
    'firstDay',
    'dir',
    'weekends',
    'hiddenDays',
    'fixedWeekCount',
    'weekNumbers',
    'weekNumbersWithinDays',
    'weekNumberCalculation',
    'businessHours',
    'showNonCurrentDates',
    'height',
    'contentHeight',
    'aspectRatio',
    'handleWindowResize',
    'windowResizeDelay',
    'eventLimit',
    'eventLimitClick',
    'timeZone',
    'now',
    'defaultView',
    'allDaySlot',
    'allDayText',
    'slotDuration',
    'slotLabelFormat',
    'slotLabelInterval',
    'snapDuration',
    'scrollTime',
    'minTime',
    'maxTime',
    'slotEventOverlap',
    'listDayFormat',
    'listDayAltFormat',
    'noEventsMessage',
    'defaultDate',
    'nowIndicator',
    'visibleRange',
    'validRange',
    'dateIncrement',
    'dateAlignment',
    'duration',
    'dayCount',
    'locales',
    'locale',
    'eventTimeFormat',
    'columnHeader',
    'columnHeaderFormat',
    'columnHeaderText',
    'columnHeaderHtml',
    'titleFormat',
    'weekLabel',
    'displayEventTime',
    'displayEventEnd',
    'eventLimitText',
    'dayPopoverFormat',
    'navLinks',
    'selectable',
    'selectMirror',
    'selectMinDistance',
    'unselectAuto',
    'unselectCancel',
    'defaultAllDayEventDuration',
    'defaultTimedEventDuration',
    'cmdFormatter',
    'defaultRangeSeparator',
    'selectConstraint',
    'selectOverlap',
    'selectAllow',
    'editable',
    'eventStartEditable',
    'eventDurationEditable',
    'eventConstraint',
    'eventOverlap',
    'eventAllow',
    'eventClassName',
    'eventClassNames',
    'eventBackgroundColor',
    'eventBorderColor',
    'eventTextColor',
    'eventColor',
    'events',
    'eventSources',
    'allDayDefault',
    'startParam',
    'endParam',
    'lazyFetching',
    'nextDayThreshold',
    'eventOrder',
    'rerenderDelay',
    'dragRevertDuration',
    'dragScroll',
    'longPressDelay',
    'eventLongPressDelay',
    'droppable',
    'dropAccept',
    'eventDataTransform',
    'allDayMaintainDuration',
    'eventResizableFromStart',
    'timeGridEventMinHeight',
    'allDayHtml',
    'eventDragMinDistance',
    'eventSourceFailure',
    'eventSourceSuccess',
    'forceEventDuration',
    'progressiveEventRendering',
    'selectLongPressDelay',
    'selectMinDistance',
    'timeZoneParam',
    'titleRangeSeparator',
    // compound OptionsInput...
    'buttonText',
    'views',
    'plugins',
    // scheduler...
    'schedulerLicenseKey',
    'resources',
    'resourceLabelText',
    'resourceOrder',
    'filterResourcesWithEvents',
    'resourceText',
    'resourceGroupField',
    'resourceGroupText',
    'resourceAreaWidth',
    'resourceColumns',
    'resourcesInitiallyExpanded',
    'slotWidth',
    'datesAboveResources',
    'googleCalendarApiKey',
    'refetchResourcesOnNavigate',
    'eventResourceEditable'
];
const INPUT_IS_DEEP = {
    header: true,
    footer: true,
    events: true,
    eventSources: true,
    resources: true
};
const OUTPUT_NAMES = [
    'windowResize',
    'dateClick',
    'eventClick',
    'navLinkDayClick',
    'navLinkWeekClick',
    'eventMouseEnter',
    'eventMouseLeave',
    'select',
    'unselect',
    'loading',
    'eventPositioned',
    'eventDragStart',
    'eventDragStop',
    'eventDrop',
    'eventResizeStart',
    'eventResizeStop',
    'eventResize',
    'drop',
    'eventReceive',
    'eventLeave',
    '_destroyed',
    // TODO: make these inputs...
    'viewSkeletonRender',
    'viewSkeletonDestroy',
    'datesRender',
    'datesDestroy',
    'dayRender',
    'eventRender',
    'eventDestroy',
    'resourceRender'
];

let FullCalendarComponent = class FullCalendarComponent {
    constructor(element) {
        this.element = element;
        this.dirtyProps = {};
        this.deepCopies = {}; // holds frozen states
        this.windowResize = new EventEmitter();
        this.dateClick = new EventEmitter();
        this.eventClick = new EventEmitter();
        this.eventMouseEnter = new EventEmitter();
        this.eventMouseLeave = new EventEmitter();
        this.select = new EventEmitter();
        this.unselect = new EventEmitter();
        this.loading = new EventEmitter();
        this.eventPositioned = new EventEmitter();
        this.eventDragStart = new EventEmitter();
        this.eventDragStop = new EventEmitter();
        this.eventDrop = new EventEmitter();
        this.eventResizeStart = new EventEmitter();
        this.eventResizeStop = new EventEmitter();
        this.eventResize = new EventEmitter();
        this.drop = new EventEmitter();
        this.eventReceive = new EventEmitter();
        this.eventLeave = new EventEmitter();
        this._destroyed = new EventEmitter();
        this.navLinkDayClick = new EventEmitter();
        this.navLinkWeekClick = new EventEmitter();
        // TODO: make these inputs...
        this.viewSkeletonRender = new EventEmitter();
        this.viewSkeletonDestroy = new EventEmitter();
        this.datesRender = new EventEmitter();
        this.datesDestroy = new EventEmitter();
        this.dayRender = new EventEmitter();
        this.eventRender = new EventEmitter();
        this.eventDestroy = new EventEmitter();
        this.resourceRender = new EventEmitter();
    }
    ngAfterViewInit() {
        this.calendar = new Calendar(this.element.nativeElement, this.buildOptions());
        this.calendar.render();
    }
    buildOptions() {
        const options = {};
        OUTPUT_NAMES.forEach(outputName => {
            options[outputName] = (...args) => {
                this[outputName].emit(...args);
            };
        });
        // do after outputs, so that inputs with same name override
        INPUT_NAMES.forEach(inputName => {
            let inputVal = this[inputName];
            if (inputVal !== undefined) { // unfortunately FC chokes when some props are set to undefined
                if (this.deepChangeDetection && INPUT_IS_DEEP[inputName]) {
                    inputVal = deepCopy(inputVal);
                    this.deepCopies[inputName] = inputVal; // side effect!
                }
                options[inputName] = inputVal;
            }
        });
        return options;
    }
    /*
    called before ngOnChanges, allows us to manually detect input changes.
    called much more often than ngOnChanges.
    */
    ngDoCheck() {
        if (this.calendar && this.deepChangeDetection) { // not the initial render AND we do deep-mutation checks
            const { deepCopies } = this;
            for (const inputName in INPUT_IS_DEEP) {
                if (INPUT_IS_DEEP.hasOwnProperty(inputName)) {
                    const inputVal = this[inputName];
                    if (inputVal !== undefined) { // unfortunately FC chokes when some props are set to undefined
                        if (!deepEqual(inputVal, deepCopies[inputName])) {
                            const copy = deepCopy(inputVal);
                            deepCopies[inputName] = copy;
                            this.dirtyProps[inputName] = copy;
                        }
                    }
                }
            }
        }
    }
    /*
    called with confirmed changes to input references
    */
    ngOnChanges(changes) {
        if (this.calendar) { // not the initial render
            for (const inputName in changes) {
                if (changes.hasOwnProperty(inputName)) {
                    if (this.deepCopies[inputName] === undefined) { // not already handled in ngDoCheck
                        this.dirtyProps[inputName] = changes[inputName].currentValue;
                    }
                }
            }
        }
    }
    ngAfterContentChecked() {
        const { dirtyProps } = this; // hold on to reference before clearing
        if (Object.keys(dirtyProps).length > 0) {
            this.dirtyProps = {}; // clear first, in case the rerender causes new dirtiness
            this.calendar.mutateOptions(dirtyProps, [], false, deepEqual);
        }
    }
    ngOnDestroy() {
        if (this.calendar) {
            this.calendar.destroy();
        }
        this.calendar = null;
    }
    getApi() {
        return this.calendar;
    }
};
FullCalendarComponent.ɵfac = function FullCalendarComponent_Factory(t) { return new (t || FullCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
FullCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FullCalendarComponent, selectors: [["full-calendar"]], inputs: { deepChangeDetection: "deepChangeDetection", header: "header", footer: "footer", customButtons: "customButtons", buttonIcons: "buttonIcons", themeSystem: "themeSystem", bootstrapFontAwesome: "bootstrapFontAwesome", firstDay: "firstDay", dir: "dir", weekends: "weekends", hiddenDays: "hiddenDays", fixedWeekCount: "fixedWeekCount", weekNumbers: "weekNumbers", weekNumbersWithinDays: "weekNumbersWithinDays", weekNumberCalculation: "weekNumberCalculation", businessHours: "businessHours", showNonCurrentDates: "showNonCurrentDates", height: "height", contentHeight: "contentHeight", aspectRatio: "aspectRatio", handleWindowResize: "handleWindowResize", windowResizeDelay: "windowResizeDelay", eventLimit: "eventLimit", eventLimitClick: "eventLimitClick", timeZone: "timeZone", now: "now", defaultView: "defaultView", allDaySlot: "allDaySlot", allDayText: "allDayText", slotDuration: "slotDuration", slotLabelFormat: "slotLabelFormat", slotLabelInterval: "slotLabelInterval", snapDuration: "snapDuration", scrollTime: "scrollTime", minTime: "minTime", maxTime: "maxTime", slotEventOverlap: "slotEventOverlap", listDayFormat: "listDayFormat", listDayAltFormat: "listDayAltFormat", noEventsMessage: "noEventsMessage", defaultDate: "defaultDate", nowIndicator: "nowIndicator", visibleRange: "visibleRange", validRange: "validRange", dateIncrement: "dateIncrement", dateAlignment: "dateAlignment", duration: "duration", dayCount: "dayCount", locales: "locales", locale: "locale", eventTimeFormat: "eventTimeFormat", columnHeader: "columnHeader", columnHeaderFormat: "columnHeaderFormat", columnHeaderText: "columnHeaderText", columnHeaderHtml: "columnHeaderHtml", titleFormat: "titleFormat", weekLabel: "weekLabel", displayEventTime: "displayEventTime", displayEventEnd: "displayEventEnd", eventLimitText: "eventLimitText", dayPopoverFormat: "dayPopoverFormat", navLinks: "navLinks", selectable: "selectable", selectMirror: "selectMirror", unselectAuto: "unselectAuto", unselectCancel: "unselectCancel", defaultAllDayEventDuration: "defaultAllDayEventDuration", defaultTimedEventDuration: "defaultTimedEventDuration", cmdFormatter: "cmdFormatter", defaultRangeSeparator: "defaultRangeSeparator", selectConstraint: "selectConstraint", selectOverlap: "selectOverlap", selectAllow: "selectAllow", selectMinDistance: "selectMinDistance", editable: "editable", eventStartEditable: "eventStartEditable", eventDurationEditable: "eventDurationEditable", eventConstraint: "eventConstraint", eventOverlap: "eventOverlap", eventAllow: "eventAllow", eventClassName: "eventClassName", eventClassNames: "eventClassNames", eventBackgroundColor: "eventBackgroundColor", eventBorderColor: "eventBorderColor", eventTextColor: "eventTextColor", eventColor: "eventColor", events: "events", eventSources: "eventSources", allDayDefault: "allDayDefault", startParam: "startParam", endParam: "endParam", lazyFetching: "lazyFetching", nextDayThreshold: "nextDayThreshold", eventOrder: "eventOrder", rerenderDelay: "rerenderDelay", dragRevertDuration: "dragRevertDuration", dragScroll: "dragScroll", longPressDelay: "longPressDelay", eventLongPressDelay: "eventLongPressDelay", droppable: "droppable", dropAccept: "dropAccept", eventDataTransform: "eventDataTransform", allDayMaintainDuration: "allDayMaintainDuration", eventResizableFromStart: "eventResizableFromStart", timeGridEventMinHeight: "timeGridEventMinHeight", allDayHtml: "allDayHtml", eventDragMinDistance: "eventDragMinDistance", eventSourceFailure: "eventSourceFailure", eventSourceSuccess: "eventSourceSuccess", forceEventDuration: "forceEventDuration", progressiveEventRendering: "progressiveEventRendering", selectLongPressDelay: "selectLongPressDelay", timeZoneParam: "timeZoneParam", titleRangeSeparator: "titleRangeSeparator", buttonText: "buttonText", views: "views", plugins: "plugins", schedulerLicenseKey: "schedulerLicenseKey", resources: "resources", resourceLabelText: "resourceLabelText", resourceOrder: "resourceOrder", filterResourcesWithEvents: "filterResourcesWithEvents", resourceText: "resourceText", resourceGroupField: "resourceGroupField", resourceGroupText: "resourceGroupText", resourceAreaWidth: "resourceAreaWidth", resourceColumns: "resourceColumns", resourcesInitiallyExpanded: "resourcesInitiallyExpanded", slotWidth: "slotWidth", datesAboveResources: "datesAboveResources", googleCalendarApiKey: "googleCalendarApiKey", refetchResourcesOnNavigate: "refetchResourcesOnNavigate", eventResourceEditable: "eventResourceEditable" }, outputs: { windowResize: "windowResize", dateClick: "dateClick", eventClick: "eventClick", eventMouseEnter: "eventMouseEnter", eventMouseLeave: "eventMouseLeave", select: "select", unselect: "unselect", loading: "loading", eventPositioned: "eventPositioned", eventDragStart: "eventDragStart", eventDragStop: "eventDragStop", eventDrop: "eventDrop", eventResizeStart: "eventResizeStart", eventResizeStop: "eventResizeStop", eventResize: "eventResize", drop: "drop", eventReceive: "eventReceive", eventLeave: "eventLeave", _destroyed: "_destroyed", navLinkDayClick: "navLinkDayClick", navLinkWeekClick: "navLinkWeekClick", viewSkeletonRender: "viewSkeletonRender", viewSkeletonDestroy: "viewSkeletonDestroy", datesRender: "datesRender", datesDestroy: "datesDestroy", dayRender: "dayRender", eventRender: "eventRender", eventDestroy: "eventDestroy", resourceRender: "resourceRender" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function FullCalendarComponent_Template(rf, ctx) { }, encapsulation: 2 });
FullCalendarComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "deepChangeDetection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "footer", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "customButtons", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "buttonIcons", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "themeSystem", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "bootstrapFontAwesome", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "firstDay", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "dir", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "weekends", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FullCalendarComponent.prototype, "hiddenDays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "fixedWeekCount", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "weekNumbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "weekNumbersWithinDays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "weekNumberCalculation", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "businessHours", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "showNonCurrentDates", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "contentHeight", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "aspectRatio", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "handleWindowResize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "windowResizeDelay", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventLimit", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventLimitClick", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "timeZone", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "now", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "defaultView", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "allDaySlot", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "allDayText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "slotDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "slotLabelFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "slotLabelInterval", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "snapDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "scrollTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "minTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "maxTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "slotEventOverlap", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "listDayFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "listDayAltFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "noEventsMessage", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "defaultDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "nowIndicator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "visibleRange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "validRange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "dateIncrement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "dateAlignment", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "duration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "dayCount", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FullCalendarComponent.prototype, "locales", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "locale", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventTimeFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "columnHeader", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "columnHeaderFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "columnHeaderText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "columnHeaderHtml", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "titleFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "weekLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "displayEventTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "displayEventEnd", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventLimitText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "dayPopoverFormat", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "navLinks", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "selectable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "selectMirror", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "unselectAuto", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "unselectCancel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "defaultAllDayEventDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "defaultTimedEventDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "cmdFormatter", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "defaultRangeSeparator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "selectConstraint", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "selectOverlap", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "selectAllow", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "selectMinDistance", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "editable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "eventStartEditable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "eventDurationEditable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventConstraint", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventOverlap", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventAllow", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventClassName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventClassNames", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "eventBackgroundColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "eventBorderColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "eventTextColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "eventColor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "events", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FullCalendarComponent.prototype, "eventSources", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "allDayDefault", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "startParam", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "endParam", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "lazyFetching", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "nextDayThreshold", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventOrder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "rerenderDelay", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "dragRevertDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "dragScroll", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "longPressDelay", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "eventLongPressDelay", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "droppable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "dropAccept", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventDataTransform", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "allDayMaintainDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "eventResizableFromStart", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "timeGridEventMinHeight", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "allDayHtml", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "eventDragMinDistance", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventSourceFailure", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventSourceSuccess", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "forceEventDuration", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "progressiveEventRendering", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], FullCalendarComponent.prototype, "selectLongPressDelay", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "timeZoneParam", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "titleRangeSeparator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "buttonText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "views", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FullCalendarComponent.prototype, "plugins", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "schedulerLicenseKey", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resources", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "resourceLabelText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceOrder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "filterResourcesWithEvents", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceGroupField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceGroupText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceAreaWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceColumns", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourcesInitiallyExpanded", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "slotWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "datesAboveResources", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FullCalendarComponent.prototype, "googleCalendarApiKey", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "refetchResourcesOnNavigate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FullCalendarComponent.prototype, "eventResourceEditable", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "windowResize", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "dateClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventMouseEnter", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventMouseLeave", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "select", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "unselect", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "loading", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventPositioned", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventDragStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventDragStop", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventDrop", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventResizeStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventResizeStop", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventResize", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "drop", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventReceive", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventLeave", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "_destroyed", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "navLinkDayClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "navLinkWeekClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "viewSkeletonRender", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "viewSkeletonDestroy", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "datesRender", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "datesDestroy", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "dayRender", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventRender", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "eventDestroy", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FullCalendarComponent.prototype, "resourceRender", void 0);
FullCalendarComponent = __decorate([ __metadata("design:paramtypes", [ElementRef])
], FullCalendarComponent);

let FullCalendarModule = class FullCalendarModule {
};
FullCalendarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FullCalendarModule });
FullCalendarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FullCalendarModule_Factory(t) { return new (t || FullCalendarModule)(); }, imports: [[]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'full-calendar',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { windowResize: [{
            type: Output
        }], dateClick: [{
            type: Output
        }], eventClick: [{
            type: Output
        }], eventMouseEnter: [{
            type: Output
        }], eventMouseLeave: [{
            type: Output
        }], select: [{
            type: Output
        }], unselect: [{
            type: Output
        }], loading: [{
            type: Output
        }], eventPositioned: [{
            type: Output
        }], eventDragStart: [{
            type: Output
        }], eventDragStop: [{
            type: Output
        }], eventDrop: [{
            type: Output
        }], eventResizeStart: [{
            type: Output
        }], eventResizeStop: [{
            type: Output
        }], eventResize: [{
            type: Output
        }], drop: [{
            type: Output
        }], eventReceive: [{
            type: Output
        }], eventLeave: [{
            type: Output
        }], _destroyed: [{
            type: Output
        }], navLinkDayClick: [{
            type: Output
        }], navLinkWeekClick: [{
            type: Output
        }], viewSkeletonRender: [{
            type: Output
        }], viewSkeletonDestroy: [{
            type: Output
        }], datesRender: [{
            type: Output
        }], datesDestroy: [{
            type: Output
        }], dayRender: [{
            type: Output
        }], eventRender: [{
            type: Output
        }], eventDestroy: [{
            type: Output
        }], resourceRender: [{
            type: Output
        }], deepChangeDetection: [{
            type: Input
        }], header: [{
            type: Input
        }], footer: [{
            type: Input
        }], customButtons: [{
            type: Input
        }], buttonIcons: [{
            type: Input
        }], themeSystem: [{
            type: Input
        }], bootstrapFontAwesome: [{
            type: Input
        }], firstDay: [{
            type: Input
        }], dir: [{
            type: Input
        }], weekends: [{
            type: Input
        }], hiddenDays: [{
            type: Input
        }], fixedWeekCount: [{
            type: Input
        }], weekNumbers: [{
            type: Input
        }], weekNumbersWithinDays: [{
            type: Input
        }], weekNumberCalculation: [{
            type: Input
        }], businessHours: [{
            type: Input
        }], showNonCurrentDates: [{
            type: Input
        }], height: [{
            type: Input
        }], contentHeight: [{
            type: Input
        }], aspectRatio: [{
            type: Input
        }], handleWindowResize: [{
            type: Input
        }], windowResizeDelay: [{
            type: Input
        }], eventLimit: [{
            type: Input
        }], eventLimitClick: [{
            type: Input
        }], timeZone: [{
            type: Input
        }], now: [{
            type: Input
        }], defaultView: [{
            type: Input
        }], allDaySlot: [{
            type: Input
        }], allDayText: [{
            type: Input
        }], slotDuration: [{
            type: Input
        }], slotLabelFormat: [{
            type: Input
        }], slotLabelInterval: [{
            type: Input
        }], snapDuration: [{
            type: Input
        }], scrollTime: [{
            type: Input
        }], minTime: [{
            type: Input
        }], maxTime: [{
            type: Input
        }], slotEventOverlap: [{
            type: Input
        }], listDayFormat: [{
            type: Input
        }], listDayAltFormat: [{
            type: Input
        }], noEventsMessage: [{
            type: Input
        }], defaultDate: [{
            type: Input
        }], nowIndicator: [{
            type: Input
        }], visibleRange: [{
            type: Input
        }], validRange: [{
            type: Input
        }], dateIncrement: [{
            type: Input
        }], dateAlignment: [{
            type: Input
        }], duration: [{
            type: Input
        }], dayCount: [{
            type: Input
        }], locales: [{
            type: Input
        }], locale: [{
            type: Input
        }], eventTimeFormat: [{
            type: Input
        }], columnHeader: [{
            type: Input
        }], columnHeaderFormat: [{
            type: Input
        }], columnHeaderText: [{
            type: Input
        }], columnHeaderHtml: [{
            type: Input
        }], titleFormat: [{
            type: Input
        }], weekLabel: [{
            type: Input
        }], displayEventTime: [{
            type: Input
        }], displayEventEnd: [{
            type: Input
        }], eventLimitText: [{
            type: Input
        }], dayPopoverFormat: [{
            type: Input
        }], navLinks: [{
            type: Input
        }], selectable: [{
            type: Input
        }], selectMirror: [{
            type: Input
        }], unselectAuto: [{
            type: Input
        }], unselectCancel: [{
            type: Input
        }], defaultAllDayEventDuration: [{
            type: Input
        }], defaultTimedEventDuration: [{
            type: Input
        }], cmdFormatter: [{
            type: Input
        }], defaultRangeSeparator: [{
            type: Input
        }], selectConstraint: [{
            type: Input
        }], selectOverlap: [{
            type: Input
        }], selectAllow: [{
            type: Input
        }], selectMinDistance: [{
            type: Input
        }], editable: [{
            type: Input
        }], eventStartEditable: [{
            type: Input
        }], eventDurationEditable: [{
            type: Input
        }], eventConstraint: [{
            type: Input
        }], eventOverlap: [{
            type: Input
        }], eventAllow: [{
            type: Input
        }], eventClassName: [{
            type: Input
        }], eventClassNames: [{
            type: Input
        }], eventBackgroundColor: [{
            type: Input
        }], eventBorderColor: [{
            type: Input
        }], eventTextColor: [{
            type: Input
        }], eventColor: [{
            type: Input
        }], events: [{
            type: Input
        }], eventSources: [{
            type: Input
        }], allDayDefault: [{
            type: Input
        }], startParam: [{
            type: Input
        }], endParam: [{
            type: Input
        }], lazyFetching: [{
            type: Input
        }], nextDayThreshold: [{
            type: Input
        }], eventOrder: [{
            type: Input
        }], rerenderDelay: [{
            type: Input
        }], dragRevertDuration: [{
            type: Input
        }], dragScroll: [{
            type: Input
        }], longPressDelay: [{
            type: Input
        }], eventLongPressDelay: [{
            type: Input
        }], droppable: [{
            type: Input
        }], dropAccept: [{
            type: Input
        }], eventDataTransform: [{
            type: Input
        }], allDayMaintainDuration: [{
            type: Input
        }], eventResizableFromStart: [{
            type: Input
        }], timeGridEventMinHeight: [{
            type: Input
        }], allDayHtml: [{
            type: Input
        }], eventDragMinDistance: [{
            type: Input
        }], eventSourceFailure: [{
            type: Input
        }], eventSourceSuccess: [{
            type: Input
        }], forceEventDuration: [{
            type: Input
        }], progressiveEventRendering: [{
            type: Input
        }], selectLongPressDelay: [{
            type: Input
        }], timeZoneParam: [{
            type: Input
        }], titleRangeSeparator: [{
            type: Input
        }], buttonText: [{
            type: Input
        }], views: [{
            type: Input
        }], plugins: [{
            type: Input
        }], schedulerLicenseKey: [{
            type: Input
        }], resources: [{
            type: Input
        }], resourceLabelText: [{
            type: Input
        }], resourceOrder: [{
            type: Input
        }], filterResourcesWithEvents: [{
            type: Input
        }], resourceText: [{
            type: Input
        }], resourceGroupField: [{
            type: Input
        }], resourceGroupText: [{
            type: Input
        }], resourceAreaWidth: [{
            type: Input
        }], resourceColumns: [{
            type: Input
        }], resourcesInitiallyExpanded: [{
            type: Input
        }], slotWidth: [{
            type: Input
        }], datesAboveResources: [{
            type: Input
        }], googleCalendarApiKey: [{
            type: Input
        }], refetchResourcesOnNavigate: [{
            type: Input
        }], eventResourceEditable: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FullCalendarModule, { declarations: [FullCalendarComponent], exports: [FullCalendarComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullCalendarModule, [{
        type: NgModule,
        args: [{
                declarations: [FullCalendarComponent],
                imports: [],
                exports: [FullCalendarComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of fullcalendar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FullCalendarComponent, FullCalendarModule };

//# sourceMappingURL=fullcalendar-angular.js.map