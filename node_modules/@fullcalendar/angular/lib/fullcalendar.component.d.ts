import { ElementRef, EventEmitter, SimpleChanges, AfterViewInit, DoCheck, OnChanges, AfterContentChecked, OnDestroy } from '@angular/core';
import { Calendar, BusinessHoursInput, ConstraintInput, EventApi, PluginDef } from '@fullcalendar/core';
import * as ɵngcc0 from '@angular/core';
declare type DateInput = any;
declare type DurationInput = any;
declare type FormatterInput = any;
declare type DateRangeInput = any;
declare type RawLocale = any;
declare type LocaleSingularArg = any;
declare type OverlapFunc = any;
declare type AllowFunc = any;
declare type CustomButtonInput = any;
declare type ButtonIconsInput = any;
declare type CellInfo = any;
declare type ButtonTextCompoundInput = any;
declare type ToolbarInput = any;
declare type ViewOptionsInput = any;
declare type EventSourceInput = any;
declare type EventInputTransformer = any;
declare type EventSourceErrorResponseHandler = any;
declare type EventSourceSuccessResponseHandler = any;
export declare class FullCalendarComponent implements AfterViewInit, DoCheck, OnChanges, AfterContentChecked, OnDestroy {
    private element;
    deepChangeDetection?: boolean;
    private calendar;
    private dirtyProps;
    private deepCopies;
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    private buildOptions;
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    getApi(): Calendar;
    header?: boolean | ToolbarInput;
    footer?: boolean | ToolbarInput;
    customButtons?: {
        [name: string]: CustomButtonInput;
    };
    buttonIcons?: boolean | ButtonIconsInput;
    themeSystem?: 'standard' | string;
    bootstrapFontAwesome?: boolean | ButtonIconsInput;
    firstDay?: number;
    dir?: 'ltr' | 'rtl' | 'auto';
    weekends?: boolean;
    hiddenDays?: number[];
    fixedWeekCount?: boolean;
    weekNumbers?: boolean;
    weekNumbersWithinDays?: boolean;
    weekNumberCalculation?: 'local' | 'ISO' | ((m: Date) => number);
    businessHours?: BusinessHoursInput;
    showNonCurrentDates?: boolean;
    height?: number | 'auto' | 'parent' | (() => number);
    contentHeight?: number | 'auto' | (() => number);
    aspectRatio?: number;
    handleWindowResize?: boolean;
    windowResizeDelay?: number;
    eventLimit?: boolean | number;
    eventLimitClick?: 'popover' | 'week' | 'day' | string | ((cellinfo: CellInfo, jsevent: Event) => void);
    timeZone?: string | boolean;
    now?: DateInput | (() => DateInput);
    defaultView?: string;
    allDaySlot?: boolean;
    allDayText?: string;
    slotDuration?: DurationInput;
    slotLabelFormat?: FormatterInput;
    slotLabelInterval?: DurationInput;
    snapDuration?: DurationInput;
    scrollTime?: DurationInput;
    minTime?: DurationInput;
    maxTime?: DurationInput;
    slotEventOverlap?: boolean;
    listDayFormat?: FormatterInput | boolean;
    listDayAltFormat?: FormatterInput | boolean;
    noEventsMessage?: string;
    defaultDate?: DateInput;
    nowIndicator?: boolean;
    visibleRange?: ((currentDate: Date) => DateRangeInput) | DateRangeInput;
    validRange?: DateRangeInput;
    dateIncrement?: DurationInput;
    dateAlignment?: string;
    duration?: DurationInput;
    dayCount?: number;
    locales?: RawLocale[];
    locale?: LocaleSingularArg;
    eventTimeFormat?: FormatterInput;
    columnHeader?: boolean;
    columnHeaderFormat?: FormatterInput;
    columnHeaderText?: string | ((date: DateInput) => string);
    columnHeaderHtml?: string | ((date: DateInput) => string);
    titleFormat?: FormatterInput;
    weekLabel?: string;
    displayEventTime?: boolean;
    displayEventEnd?: boolean;
    eventLimitText?: string | ((eventCnt: number) => string);
    dayPopoverFormat?: FormatterInput;
    navLinks?: boolean;
    selectable?: boolean;
    selectMirror?: boolean;
    unselectAuto?: boolean;
    unselectCancel?: string;
    defaultAllDayEventDuration?: DurationInput;
    defaultTimedEventDuration?: DurationInput;
    cmdFormatter?: string;
    defaultRangeSeparator?: string;
    selectConstraint?: ConstraintInput;
    selectOverlap?: boolean | OverlapFunc;
    selectAllow?: AllowFunc;
    selectMinDistance?: number;
    editable?: boolean;
    eventStartEditable?: boolean;
    eventDurationEditable?: boolean;
    eventConstraint?: ConstraintInput;
    eventOverlap?: boolean | OverlapFunc;
    eventAllow?: AllowFunc;
    eventClassName?: string[] | string;
    eventClassNames?: string[] | string;
    eventBackgroundColor?: string;
    eventBorderColor?: string;
    eventTextColor?: string;
    eventColor?: string;
    events?: EventSourceInput;
    eventSources?: EventSourceInput[];
    allDayDefault?: boolean;
    startParam?: string;
    endParam?: string;
    lazyFetching?: boolean;
    nextDayThreshold?: DurationInput;
    eventOrder?: string | Array<((a: EventApi, b: EventApi) => number) | (string | ((a: EventApi, b: EventApi) => number))>;
    rerenderDelay?: number | null;
    dragRevertDuration?: number;
    dragScroll?: boolean;
    longPressDelay?: number;
    eventLongPressDelay?: number;
    droppable?: boolean;
    dropAccept?: string | ((draggable: any) => boolean);
    eventDataTransform?: EventInputTransformer;
    allDayMaintainDuration?: Boolean;
    eventResizableFromStart?: Boolean;
    timeGridEventMinHeight?: number;
    allDayHtml?: string;
    eventDragMinDistance?: number;
    eventSourceFailure?: EventSourceErrorResponseHandler;
    eventSourceSuccess?: EventSourceSuccessResponseHandler;
    forceEventDuration?: boolean;
    progressiveEventRendering?: boolean;
    selectLongPressDelay?: number;
    timeZoneParam?: string;
    titleRangeSeparator?: string;
    buttonText?: ButtonTextCompoundInput;
    views?: {
        [viewId: string]: ViewOptionsInput;
    };
    plugins?: (PluginDef | string)[];
    schedulerLicenseKey?: string;
    resources?: any;
    resourceLabelText?: string;
    resourceOrder?: any;
    filterResourcesWithEvents?: any;
    resourceText?: any;
    resourceGroupField?: any;
    resourceGroupText?: any;
    resourceAreaWidth?: any;
    resourceColumns?: any;
    resourcesInitiallyExpanded?: any;
    slotWidth?: any;
    datesAboveResources?: any;
    googleCalendarApiKey?: string;
    refetchResourcesOnNavigate?: boolean;
    eventResourceEditable?: boolean;
    windowResize: EventEmitter<any>;
    dateClick: EventEmitter<any>;
    eventClick: EventEmitter<any>;
    eventMouseEnter: EventEmitter<any>;
    eventMouseLeave: EventEmitter<any>;
    select: EventEmitter<any>;
    unselect: EventEmitter<any>;
    loading: EventEmitter<any>;
    eventPositioned: EventEmitter<any>;
    eventDragStart: EventEmitter<any>;
    eventDragStop: EventEmitter<any>;
    eventDrop: EventEmitter<any>;
    eventResizeStart: EventEmitter<any>;
    eventResizeStop: EventEmitter<any>;
    eventResize: EventEmitter<any>;
    drop: EventEmitter<any>;
    eventReceive: EventEmitter<any>;
    eventLeave: EventEmitter<any>;
    _destroyed: EventEmitter<any>;
    navLinkDayClick: EventEmitter<any>;
    navLinkWeekClick: EventEmitter<any>;
    viewSkeletonRender: EventEmitter<any>;
    viewSkeletonDestroy: EventEmitter<any>;
    datesRender: EventEmitter<any>;
    datesDestroy: EventEmitter<any>;
    dayRender: EventEmitter<any>;
    eventRender: EventEmitter<any>;
    eventDestroy: EventEmitter<any>;
    resourceRender: EventEmitter<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FullCalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FullCalendarComponent, "full-calendar", never, { "deepChangeDetection": "deepChangeDetection"; "header": "header"; "footer": "footer"; "customButtons": "customButtons"; "buttonIcons": "buttonIcons"; "themeSystem": "themeSystem"; "bootstrapFontAwesome": "bootstrapFontAwesome"; "firstDay": "firstDay"; "dir": "dir"; "weekends": "weekends"; "hiddenDays": "hiddenDays"; "fixedWeekCount": "fixedWeekCount"; "weekNumbers": "weekNumbers"; "weekNumbersWithinDays": "weekNumbersWithinDays"; "weekNumberCalculation": "weekNumberCalculation"; "businessHours": "businessHours"; "showNonCurrentDates": "showNonCurrentDates"; "height": "height"; "contentHeight": "contentHeight"; "aspectRatio": "aspectRatio"; "handleWindowResize": "handleWindowResize"; "windowResizeDelay": "windowResizeDelay"; "eventLimit": "eventLimit"; "eventLimitClick": "eventLimitClick"; "timeZone": "timeZone"; "now": "now"; "defaultView": "defaultView"; "allDaySlot": "allDaySlot"; "allDayText": "allDayText"; "slotDuration": "slotDuration"; "slotLabelFormat": "slotLabelFormat"; "slotLabelInterval": "slotLabelInterval"; "snapDuration": "snapDuration"; "scrollTime": "scrollTime"; "minTime": "minTime"; "maxTime": "maxTime"; "slotEventOverlap": "slotEventOverlap"; "listDayFormat": "listDayFormat"; "listDayAltFormat": "listDayAltFormat"; "noEventsMessage": "noEventsMessage"; "defaultDate": "defaultDate"; "nowIndicator": "nowIndicator"; "visibleRange": "visibleRange"; "validRange": "validRange"; "dateIncrement": "dateIncrement"; "dateAlignment": "dateAlignment"; "duration": "duration"; "dayCount": "dayCount"; "locales": "locales"; "locale": "locale"; "eventTimeFormat": "eventTimeFormat"; "columnHeader": "columnHeader"; "columnHeaderFormat": "columnHeaderFormat"; "columnHeaderText": "columnHeaderText"; "columnHeaderHtml": "columnHeaderHtml"; "titleFormat": "titleFormat"; "weekLabel": "weekLabel"; "displayEventTime": "displayEventTime"; "displayEventEnd": "displayEventEnd"; "eventLimitText": "eventLimitText"; "dayPopoverFormat": "dayPopoverFormat"; "navLinks": "navLinks"; "selectable": "selectable"; "selectMirror": "selectMirror"; "unselectAuto": "unselectAuto"; "unselectCancel": "unselectCancel"; "defaultAllDayEventDuration": "defaultAllDayEventDuration"; "defaultTimedEventDuration": "defaultTimedEventDuration"; "cmdFormatter": "cmdFormatter"; "defaultRangeSeparator": "defaultRangeSeparator"; "selectConstraint": "selectConstraint"; "selectOverlap": "selectOverlap"; "selectAllow": "selectAllow"; "selectMinDistance": "selectMinDistance"; "editable": "editable"; "eventStartEditable": "eventStartEditable"; "eventDurationEditable": "eventDurationEditable"; "eventConstraint": "eventConstraint"; "eventOverlap": "eventOverlap"; "eventAllow": "eventAllow"; "eventClassName": "eventClassName"; "eventClassNames": "eventClassNames"; "eventBackgroundColor": "eventBackgroundColor"; "eventBorderColor": "eventBorderColor"; "eventTextColor": "eventTextColor"; "eventColor": "eventColor"; "events": "events"; "eventSources": "eventSources"; "allDayDefault": "allDayDefault"; "startParam": "startParam"; "endParam": "endParam"; "lazyFetching": "lazyFetching"; "nextDayThreshold": "nextDayThreshold"; "eventOrder": "eventOrder"; "rerenderDelay": "rerenderDelay"; "dragRevertDuration": "dragRevertDuration"; "dragScroll": "dragScroll"; "longPressDelay": "longPressDelay"; "eventLongPressDelay": "eventLongPressDelay"; "droppable": "droppable"; "dropAccept": "dropAccept"; "eventDataTransform": "eventDataTransform"; "allDayMaintainDuration": "allDayMaintainDuration"; "eventResizableFromStart": "eventResizableFromStart"; "timeGridEventMinHeight": "timeGridEventMinHeight"; "allDayHtml": "allDayHtml"; "eventDragMinDistance": "eventDragMinDistance"; "eventSourceFailure": "eventSourceFailure"; "eventSourceSuccess": "eventSourceSuccess"; "forceEventDuration": "forceEventDuration"; "progressiveEventRendering": "progressiveEventRendering"; "selectLongPressDelay": "selectLongPressDelay"; "timeZoneParam": "timeZoneParam"; "titleRangeSeparator": "titleRangeSeparator"; "buttonText": "buttonText"; "views": "views"; "plugins": "plugins"; "schedulerLicenseKey": "schedulerLicenseKey"; "resources": "resources"; "resourceLabelText": "resourceLabelText"; "resourceOrder": "resourceOrder"; "filterResourcesWithEvents": "filterResourcesWithEvents"; "resourceText": "resourceText"; "resourceGroupField": "resourceGroupField"; "resourceGroupText": "resourceGroupText"; "resourceAreaWidth": "resourceAreaWidth"; "resourceColumns": "resourceColumns"; "resourcesInitiallyExpanded": "resourcesInitiallyExpanded"; "slotWidth": "slotWidth"; "datesAboveResources": "datesAboveResources"; "googleCalendarApiKey": "googleCalendarApiKey"; "refetchResourcesOnNavigate": "refetchResourcesOnNavigate"; "eventResourceEditable": "eventResourceEditable"; }, { "windowResize": "windowResize"; "dateClick": "dateClick"; "eventClick": "eventClick"; "eventMouseEnter": "eventMouseEnter"; "eventMouseLeave": "eventMouseLeave"; "select": "select"; "unselect": "unselect"; "loading": "loading"; "eventPositioned": "eventPositioned"; "eventDragStart": "eventDragStart"; "eventDragStop": "eventDragStop"; "eventDrop": "eventDrop"; "eventResizeStart": "eventResizeStart"; "eventResizeStop": "eventResizeStop"; "eventResize": "eventResize"; "drop": "drop"; "eventReceive": "eventReceive"; "eventLeave": "eventLeave"; "_destroyed": "_destroyed"; "navLinkDayClick": "navLinkDayClick"; "navLinkWeekClick": "navLinkWeekClick"; "viewSkeletonRender": "viewSkeletonRender"; "viewSkeletonDestroy": "viewSkeletonDestroy"; "datesRender": "datesRender"; "datesDestroy": "datesDestroy"; "dayRender": "dayRender"; "eventRender": "eventRender"; "eventDestroy": "eventDestroy"; "resourceRender": "resourceRender"; }, never, never>;
}
export {};

//# sourceMappingURL=fullcalendar.component.d.ts.map