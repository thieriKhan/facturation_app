{"version":3,"file":"angular-archwizard.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","ng:/angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng:/angular-archwizard/lib/util/wizard-step.interface.ts","ng:/angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng:/angular-archwizard/lib/components/wizard-completion-step.component.ts","ng:/angular-archwizard/lib/util/moving-direction.enum.ts","ng:/angular-archwizard/lib/navigation/base-navigation-mode.interface.ts","ng:/angular-archwizard/lib/navigation/configurable-navigation-mode.ts","ng:/angular-archwizard/lib/components/wizard.component.ts","ng:/angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng:/angular-archwizard/lib/components/wizard-step.component.ts","ng:/angular-archwizard/lib/directives/enable-back-links.directive.ts","ng:/angular-archwizard/lib/util/step-id.interface.ts","ng:/angular-archwizard/lib/util/step-index.interface.ts","ng:/angular-archwizard/lib/util/step-offset.interface.ts","ng:/angular-archwizard/lib/directives/go-to-step.directive.ts","ng:/angular-archwizard/lib/directives/next-step.directive.ts","ng:/angular-archwizard/lib/directives/optional-step.directive.ts","ng:/angular-archwizard/lib/directives/previous-step.directive.ts","ng:/angular-archwizard/lib/directives/reset-wizard.directive.ts","ng:/angular-archwizard/lib/directives/selected-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step.directive.ts","ng:/angular-archwizard/lib/directives/navigation-mode.directive.ts","ng:/angular-archwizard/lib/directives/completed-step.directive.ts","ng:/angular-archwizard/lib/archwizard.module.ts"],"names":["TemplateRef","Directive","EventEmitter","ContentChild","Input","Output","HostBinding","Component","forwardRef","MovingDirection","ContentChildren","QueryList","Host","Optional","HostListener","NgModule","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n})\nexport class WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import { ContentChild, EventEmitter, HostBinding, Input, Output, Directive } from '@angular/core';\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {MovingDirection} from './moving-direction.enum';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n@Directive()\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\n   * Allows to display arbitrary content as a step symbol instead of plain text.\n   */\n  @ContentChild(WizardStepSymbolDirective)\n  public stepSymbolTemplate: WizardStepSymbolDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = {symbol: ''};\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n   *\n   * Users will typically use `CompletedStepDirective` to set this flag\n   */\n  public initiallyCompleted = false;\n\n  /**\n   * A boolean describing if the wizard step is being edited after being competed\n   *\n   * This flag can only be true when `selected` is true.\n   */\n  public editing = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns true if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (typeof(condition) === typeof(true)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {EventEmitter, Directive} from '@angular/core';\nimport {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n@Directive()\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n    this.completed = this.initiallyCompleted;\n    this.stepExit.emit(direction);\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  templateUrl: 'wizard-completion-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nexport enum MovingDirection {\n  /**\n   * A forward step transition\n   */\n  Forwards,\n  /**\n   * A backward step transition\n   */\n  Backwards,\n  /**\n   * No step transition was done\n   */\n  Stay\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nexport abstract class BaseNavigationMode implements NavigationMode {\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * In this implementation, a destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - the destination step can be entered in the direction from the current step\n   *\n   * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  public canGoToStep(wizard: WizardComponent, destinationIndex: number): Promise<boolean> {\n    const hasStep = wizard.hasStep(destinationIndex);\n\n    const movingDirection = wizard.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous && wizard.currentStep.canExitStep(movingDirection);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n    };\n\n    const canTransitionToStep = (previous: boolean) => {\n      return previous && this.canTransitionToStep(wizard, destinationIndex);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canTransitionToStep)\n      // Apply user-defined checks at the end.  They can involve user interaction\n      // which is better to be avoided if navigation mode does not actually allow the transition\n      // (`canTransitionToStep` returns `false`).\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n   *\n   * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n   * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n   * by previous/next buttons, but not using the navigation bar.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    return this.isNavigable(wizard, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(\n    wizard: WizardComponent,\n    destinationIndex: number,\n    preFinalize?: EventEmitter<void>,\n    postFinalize?: EventEmitter<void>): void {\n\n    this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = wizard.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        wizard.currentStep.completed = true;\n        wizard.currentStep.exit(movingDirection);\n        wizard.currentStep.editing = false;\n        wizard.currentStep.selected = false;\n\n        this.transition(wizard, destinationIndex);\n\n        // remember if the next step is already completed before entering it to properly set `editing` flag\n        const wasCompleted = wizard.completed || wizard.currentStep.completed;\n\n        // go to next step\n        wizard.currentStep.enter(movingDirection);\n        wizard.currentStep.selected = true;\n        if (wasCompleted) {\n          wizard.currentStep.editing = true;\n        }\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        wizard.currentStep.exit(MovingDirection.Stay);\n        wizard.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * Transitions the wizard to the given step index.\n   *\n   * Can perform additional actions in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    wizard.currentStepIndex = destinationIndex;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public abstract isNavigable(WizardComponent: WizardComponent, destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   *\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete.\n   *\n   * @param wizard The wizard component to operate on\n   */\n  public reset(wizard: WizardComponent): void {\n    this.ensureCanReset(wizard);\n\n    // reset the step internal state\n    wizard.wizardSteps.forEach(step => {\n      step.completed = step.initiallyCompleted;\n      step.selected = false;\n      step.editing = false;\n    });\n\n    // set the first step as the current step\n    wizard.currentStepIndex = wizard.defaultStepIndex;\n    wizard.currentStep.selected = true;\n    wizard.currentStep.enter(MovingDirection.Forwards);\n  }\n\n  /**\n   * Checks if wizard configuration allows to perform reset.\n   *\n   * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n   *\n   * Can include additional checks in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!wizard.hasStep(wizard.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n    }\n  }\n}\n","import {BaseNavigationMode} from './base-navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nexport class ConfigurableNavigationMode extends BaseNavigationMode {\n\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  constructor(\n    private navigateBackward: 'allow'|'deny'|null = null,\n    private navigateForward: 'allow'|'deny'|'visited'|null = null,\n  ) {\n    super();\n    this.navigateBackward = this.navigateBackward || 'allow';\n    this.navigateForward = this.navigateForward || 'deny';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    // if the destination step can be navigated to using the navigation bar,\n    // it should be accessible with [goToStep] as well\n    if (this.isNavigable(wizard, destinationIndex)) {\n      return true;\n    }\n\n    // navigation with [goToStep] is permitted if all previous steps\n    // to the destination step have been completed or are optional\n    return wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex)\n        .every(step => step.completed || step.optional);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    if (this.navigateForward === 'deny') {\n      // set all steps after the destination step to incomplete\n      wizard.wizardSteps\n        .filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex)\n        .forEach(step => step.completed = false);\n    }\n\n    super.transition(wizard, destinationIndex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isNavigable(wizard: WizardComponent, destinationIndex: number): boolean {\n    // Check if the destination step can be navigated to\n    const destinationStep = wizard.getStepAtIndex(destinationIndex);\n    if (destinationStep instanceof WizardCompletionStep) {\n      // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      const previousStepsCompleted = wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n      if (!previousStepsCompleted) {\n        return false;\n      }\n    }\n\n    // Apply navigation pocicies\n    if (destinationIndex < wizard.currentStepIndex) {\n      // If the destination step is before current, apply the `navigateBackward` policy\n      switch (this.navigateBackward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        default:\n          throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n      }\n    } else if (destinationIndex > wizard.currentStepIndex) {\n      // If the destination step is after current, apply the `navigateForward` policy\n      switch (this.navigateForward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        case 'visited': return destinationStep.completed;\n        default:\n          throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n      }\n    } else {\n      // Re-entering the current step is not allowed\n      return false;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    super.ensureCanReset(wizard);\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n    const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n    if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n      throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n    }\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  QueryList,\n  EventEmitter,\n} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  templateUrl: 'wizard.component.html',\n})\nexport class WizardComponent implements AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep, { descendants: true })\n  public wizardStepsQueryList: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n  @Input()\n  public get defaultStepIndex(): number {\n    // This value can be either:\n    // - the index of a wizard step with a `selected` directive, or\n    // - the default step index, set in the [[WizardComponent]]\n\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n  public set defaultStepIndex(defaultStepIndex: number) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n  private _defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   *\n   * For outside access, use the [[navigation]] getter.\n   */\n  private _navigation: NavigationMode = new ConfigurableNavigationMode();\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   *\n   * For outside access, use the [[wizardSteps]] getter.\n   */\n  private _wizardSteps: WizardStep[] = [];\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   *\n   * Note: Do not modify this field directly.  Instead, use navigation methods:\n   * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n      this.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n\n    // finally reset the whole wizard component\n    setTimeout(() => this.reset());\n  }\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public get wizardSteps(): WizardStep[] {\n    return this._wizardSteps;\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param wizardSteps The updated wizard steps\n   */\n  private updateWizardSteps(wizardSteps: WizardStep[]): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this._wizardSteps = wizardSteps;\n  }\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public get navigation(): NavigationMode {\n    return this._navigation;\n  }\n\n  /**\n   * Updates the navigation mode for this wizard component\n   *\n   * @param navigation The updated navigation mode\n   */\n  public set navigation(navigation: NavigationMode) {\n    this._navigation = navigation;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  public hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  public hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  public hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  public isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  public getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  public getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  public getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  public getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  public canGoToStep(destinationIndex: number): Promise<boolean> {\n    return this.navigation.canGoToStep(this, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n   * The [[canGoToStep]] method will be called automatically.\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the previous step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the next step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  public isNavigable(destinationIndex: number): boolean {\n    return this.navigation.isNavigable(this, destinationIndex);\n  }\n\n  /**\n   * Resets the state of this wizard.\n   */\n  public reset(): void {\n    this.navigation.reset(this);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from './wizard.component';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  templateUrl: 'wizard-navigation-bar.component.html',\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  constructor(public wizard: WizardComponent) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizard.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizard.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizard.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `current`\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `editing`\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.editing;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `done`\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return wizardStep.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `optional`\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n   *\n   * The `completed` class is only applied to completion steps.\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `completed`\n   */\n  public isCompleted(wizardStep: WizardStep): boolean {\n    return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizard.disableNavigationBar &&\n      this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  templateUrl: 'wizard-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizard: WizardComponent, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  public get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, Input, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('awOptionalStep')\n  public optional = true;\n\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    this.wizardStep.optional = this.optional || this.optional as any === '';\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click')\n  public onClick(): void {\n    this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click')\n  public onClick(): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.wizard.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective)}\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective)}\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {Directive, Input, OnChanges, SimpleChanges} from '@angular/core';\n\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\nimport {WizardComponent} from '../components/wizard.component';\n\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\n@Directive({\n  selector: '[awNavigationMode]',\n})\nexport class NavigationModeDirective implements OnChanges {\n\n  /**\n   * Custom navigation mode instance (optional).\n   */\n  @Input()\n  public awNavigationMode: NavigationMode|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps before the current step are navigable:\n   *\n   * - `navigateBackward=\"deny\"` -- the steps are not navigable\n   * - `navigateBackward=\"allow\"` -- the steps are navigable\n   */\n  @Input()\n  public navigateBackward: 'allow'|'deny'|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps after the current step are navigable:\n   *\n   * - `navigateForward=\"deny\"` -- the steps are not navigable\n   * - `navigateForward=\"allow\"` -- the steps are navigable\n   * - `navigateForward=\"visited\"` -- a step is navigable iff it was already visited before\n   */\n  @Input()\n  public navigateForward: 'allow'|'deny'|'visited'|null;\n\n  constructor(private wizard: WizardComponent) { }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this.wizard.navigation = this.getNavigationMode();\n  }\n\n  private getNavigationMode(): NavigationMode {\n    if (this.awNavigationMode) {\n      return this.awNavigationMode;\n    }\n    return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n  }\n\n}\n","import {Directive, Host, Input, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\r\n *\r\n * Initially completed steps are shown as completed when the wizard is presented to the user.\r\n *\r\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awCompletedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * An optional boolean condition can be specified:\r\n *\r\n * ```html\r\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: '[awCompletedStep]'\r\n})\r\nexport class CompletedStepDirective implements OnInit {\r\n\r\n  // tslint:disable-next-line:no-input-rename\r\n  @Input('awCompletedStep')\r\n  public initiallyCompleted = true;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  public ngOnInit(): void {\r\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\r\n    this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted as any === '';\r\n  }\r\n}\r\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardComponent} from './components/wizard.component';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {NavigationModeDirective} from './directives/navigation-mode.directive';\nimport {CompletedStepDirective} from './directives/completed-step.directive';\n\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  public static forRoot(): ModuleWithProviders<ArchwizardModule> {\n    return {\n      ngModule: ArchwizardModule,\n      providers: [\n        // Nothing here yet\n      ]\n    };\n  }\n}\n"]}