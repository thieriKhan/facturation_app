import { __decorate, __metadata, __param } from "tslib";
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
let CompletedStepDirective = class CompletedStepDirective {
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    constructor(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.initiallyCompleted = true;
    }
    /**
     * Initialization work
     */
    ngOnInit() {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';
    }
};
CompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };
CompletedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [["", "awCompletedStep", ""]], inputs: { initiallyCompleted: ["awCompletedStep", "initiallyCompleted"] } });
CompletedStepDirective.ctorParameters = () => [
    { type: WizardStep, decorators: [{ type: Host }] }
];
__decorate([
    Input('awCompletedStep'),
    __metadata("design:type", Object)
], CompletedStepDirective.prototype, "initiallyCompleted", void 0);
CompletedStepDirective = __decorate([ __param(0, Host()),
    __metadata("design:paramtypes", [WizardStep])
], CompletedStepDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awCompletedStep]'
            }]
    }], function () { return [{ type: WizardStep, decorators: [{
                type: Host
            }] }]; }, { initiallyCompleted: [{
            type: Input,
            args: ['awCompletedStep']
        }] }); })();
export { CompletedStepDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhci1hcmNod2l6YXJkL2xpYi9kaXJlY3RpdmVzL2NvbXBsZXRlZC1zdGVwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlILElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0FBQUcsSUFNcEM7QUFDRjtBQUNFO0FBQ0U7QUFFSixPQURLO0FBQ0wsSUFBRSxZQUE0QixVQUFzQjtBQUNwRCxRQUQ4QixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFUbkQsMkNBQTJDO0FBQzdDLFFBQ1MsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLElBT0UsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFTLFFBQVE7QUFBSyxRQUNsQix5SEFBeUg7QUFDN0gsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsa0JBQXlCLEtBQUssRUFBRSxDQUFDO0FBQzFHLElBQUUsQ0FBQztBQUNILENBQUM7OzhNQUFBO0FBQ0Q7QUFBZ0QsWUFYTixVQUFVLHVCQUFyQyxJQUFJO0FBQU07QUFQdkI7QUFBYSxJQURaLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztBQUMxQjtBQUVDLGtFQUZpQztBQUp0QixzQkFBc0Isb0JBSGxDLFNBQVMsQ0FBQyxmQUdQLENBV1csV0FBQSxJQUFJLEVBQUUsQ0FBQTtJQWJuQixRQUFRLEVBQUUsbUJBQW1CLE1BQzlCLENBQUMseENBWXFCLHFDQUFtQixVQUFVO0FBQUcsR0FYMUMsc0JBQXNCLENBcUJsQzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQXRCWSxzQkFBc0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtXaXphcmRTdGVwfSBmcm9tICcuLi91dGlsL3dpemFyZC1zdGVwLmludGVyZmFjZSc7XHJcblxyXG4vKipcclxuICogVGhlIGBhd0NvbXBsZXRlZFN0ZXBgIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byBtYWtlIGEgd2l6YXJkIHN0ZXAgaW5pdGlhbGx5IGNvbXBsZXRlZC5cclxuICpcclxuICogSW5pdGlhbGx5IGNvbXBsZXRlZCBzdGVwcyBhcmUgc2hvd24gYXMgY29tcGxldGVkIHdoZW4gdGhlIHdpemFyZCBpcyBwcmVzZW50ZWQgdG8gdGhlIHVzZXIuXHJcbiAqXHJcbiAqIEEgdHlwaWNhbCB1c2UgY2FzZSBpcyB0byBtYWtlIGEgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkIGlmIGl0IGlzIGF1dG9tYXRpY2FsbHkgZmlsbGVkIHdpdGggc29tZSBkZXJpdmVkL3ByZWRlZmluZWQgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqICMjIyBTeW50YXhcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8YXctd2l6YXJkLXN0ZXAgYXdDb21wbGV0ZWRTdGVwPlxyXG4gKiAgICAgLi4uXHJcbiAqIDwvYXctd2l6YXJkLXN0ZXA+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBbiBvcHRpb25hbCBib29sZWFuIGNvbmRpdGlvbiBjYW4gYmUgc3BlY2lmaWVkOlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxhdy13aXphcmQtc3RlcCBbYXdDb21wbGV0ZWRTdGVwXT1cInNob3VsZEJlQ29tcGxldGVkXCI+XHJcbiAqICAgICAuLi5cclxuICogPC9hdy13aXphcmQtc3RlcD5cclxuICogYGBgXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGF3LXdpemFyZC1zdGVwIHN0ZXBUaXRsZT1cIkZpcnN0IHN0ZXBcIiBbYXdDb21wbGV0ZWRTdGVwXT1cImZpcnN0U3RlcFByZWZpbGxlZFwiPlxyXG4gKiAgICAgLi4uXHJcbiAqIDwvYXctd2l6YXJkLXN0ZXA+XHJcbiAqIGBgYFxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbYXdDb21wbGV0ZWRTdGVwXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXHJcbiAgQElucHV0KCdhd0NvbXBsZXRlZFN0ZXAnKVxyXG4gIHB1YmxpYyBpbml0aWFsbHlDb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwLCB3aGljaCBjb250YWlucyB0aGlzIFtbQ29tcGxldGVkU3RlcERpcmVjdGl2ZV1dXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoQEhvc3QoKSBwcml2YXRlIHdpemFyZFN0ZXA6IFdpemFyZFN0ZXApIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemF0aW9uIHdvcmtcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAvLyBUaGUgaW5wdXQgcmVjZWl2ZXMgJycgd2hlbiBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlIHdpdGhvdXQgYSB2YWx1ZS4gIEluIHRoaXMgY2FzZSwgYXBwbHkgdGhlIGRlZmF1bHQgdmFsdWUgKGB0cnVlYCkuXHJcbiAgICB0aGlzLndpemFyZFN0ZXAuaW5pdGlhbGx5Q29tcGxldGVkID0gdGhpcy5pbml0aWFsbHlDb21wbGV0ZWQgfHwgdGhpcy5pbml0aWFsbHlDb21wbGV0ZWQgYXMgYW55ID09PSAnJztcclxuICB9XHJcbn1cclxuIl19