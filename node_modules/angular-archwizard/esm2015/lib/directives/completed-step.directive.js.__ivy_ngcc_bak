import { __decorate, __metadata, __param } from "tslib";
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
let CompletedStepDirective = class CompletedStepDirective {
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    constructor(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.initiallyCompleted = true;
    }
    /**
     * Initialization work
     */
    ngOnInit() {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';
    }
};
CompletedStepDirective.ctorParameters = () => [
    { type: WizardStep, decorators: [{ type: Host }] }
];
__decorate([
    Input('awCompletedStep'),
    __metadata("design:type", Object)
], CompletedStepDirective.prototype, "initiallyCompleted", void 0);
CompletedStepDirective = __decorate([
    Directive({
        selector: '[awCompletedStep]'
    }),
    __param(0, Host()),
    __metadata("design:paramtypes", [WizardStep])
], CompletedStepDirective);
export { CompletedStepDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hcmNod2l6YXJkLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBRXpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFJSCxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQU1qQzs7OztPQUlHO0lBQ0gsWUFBNEIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVRsRCwyQ0FBMkM7UUFFcEMsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0lBUWpDLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYix5SEFBeUg7UUFDekgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLGtCQUF5QixLQUFLLEVBQUUsQ0FBQztJQUN4RyxDQUFDO0NBQ0YsQ0FBQTs7WUFWeUMsVUFBVSx1QkFBckMsSUFBSTs7QUFQakI7SUFEQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7O2tFQUNRO0FBSnRCLHNCQUFzQjtJQUhsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO0tBQzlCLENBQUM7SUFZYSxXQUFBLElBQUksRUFBRSxDQUFBO3FDQUFxQixVQUFVO0dBWHZDLHNCQUFzQixDQXFCbEM7U0FyQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3QsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1dpemFyZFN0ZXB9IGZyb20gJy4uL3V0aWwvd2l6YXJkLXN0ZXAuaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYGF3Q29tcGxldGVkU3RlcGAgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIG1ha2UgYSB3aXphcmQgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkLlxyXG4gKlxyXG4gKiBJbml0aWFsbHkgY29tcGxldGVkIHN0ZXBzIGFyZSBzaG93biBhcyBjb21wbGV0ZWQgd2hlbiB0aGUgd2l6YXJkIGlzIHByZXNlbnRlZCB0byB0aGUgdXNlci5cclxuICpcclxuICogQSB0eXBpY2FsIHVzZSBjYXNlIGlzIHRvIG1ha2UgYSBzdGVwIGluaXRpYWxseSBjb21wbGV0ZWQgaWYgaXQgaXMgYXV0b21hdGljYWxseSBmaWxsZWQgd2l0aCBzb21lIGRlcml2ZWQvcHJlZGVmaW5lZCBpbmZvcm1hdGlvbi5cclxuICpcclxuICogIyMjIFN5bnRheFxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxhdy13aXphcmQtc3RlcCBhd0NvbXBsZXRlZFN0ZXA+XHJcbiAqICAgICAuLi5cclxuICogPC9hdy13aXphcmQtc3RlcD5cclxuICogYGBgXHJcbiAqXHJcbiAqIEFuIG9wdGlvbmFsIGJvb2xlYW4gY29uZGl0aW9uIGNhbiBiZSBzcGVjaWZpZWQ6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGF3LXdpemFyZC1zdGVwIFthd0NvbXBsZXRlZFN0ZXBdPVwic2hvdWxkQmVDb21wbGV0ZWRcIj5cclxuICogICAgIC4uLlxyXG4gKiA8L2F3LXdpemFyZC1zdGVwPlxyXG4gKiBgYGBcclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8YXctd2l6YXJkLXN0ZXAgc3RlcFRpdGxlPVwiRmlyc3Qgc3RlcFwiIFthd0NvbXBsZXRlZFN0ZXBdPVwiZmlyc3RTdGVwUHJlZmlsbGVkXCI+XHJcbiAqICAgICAuLi5cclxuICogPC9hdy13aXphcmQtc3RlcD5cclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thd0NvbXBsZXRlZFN0ZXBdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29tcGxldGVkU3RlcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcclxuICBASW5wdXQoJ2F3Q29tcGxldGVkU3RlcCcpXHJcbiAgcHVibGljIGluaXRpYWxseUNvbXBsZXRlZCA9IHRydWU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yXHJcbiAgICpcclxuICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAsIHdoaWNoIGNvbnRhaW5zIHRoaXMgW1tDb21wbGV0ZWRTdGVwRGlyZWN0aXZlXV1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihASG9zdCgpIHByaXZhdGUgd2l6YXJkU3RlcDogV2l6YXJkU3RlcCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6YXRpb24gd29ya1xyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIC8vIFRoZSBpbnB1dCByZWNlaXZlcyAnJyB3aGVuIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUgd2l0aG91dCBhIHZhbHVlLiAgSW4gdGhpcyBjYXNlLCBhcHBseSB0aGUgZGVmYXVsdCB2YWx1ZSAoYHRydWVgKS5cclxuICAgIHRoaXMud2l6YXJkU3RlcC5pbml0aWFsbHlDb21wbGV0ZWQgPSB0aGlzLmluaXRpYWxseUNvbXBsZXRlZCB8fCB0aGlzLmluaXRpYWxseUNvbXBsZXRlZCBhcyBhbnkgPT09ICcnO1xyXG4gIH1cclxufVxyXG4iXX0=