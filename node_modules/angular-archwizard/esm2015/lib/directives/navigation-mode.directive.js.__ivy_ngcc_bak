import { __decorate, __metadata } from "tslib";
import { Directive, Input } from '@angular/core';
import { ConfigurableNavigationMode } from '../navigation/configurable-navigation-mode';
import { WizardComponent } from '../components/wizard.component';
/**
 * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.
 *
 * There are several usage options:
 *
 * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ```
 *
 * ### Option 2. Pass in a custom navigation mode
 *
 * ```typescript
 * import { BaseNavigationMode } from 'angular-archwizard'
 *
 * class CustomNavigationMode extends BaseNavigationMode {
 *
 *   // ...
 * }
 * ```
 *
 * ```typescript
 * @Component({
 *   // ...
 * })
 * class MyComponent {
 *
 *   navigationMode = new CustomNavigationMode();
 * }
 * ```
 *
 * ```html
 * <aw-wizard [awNavigationMode]="navigationMode">...</aw-wizard>
 * ```
 *
 * ### Additional Notes
 *
 * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs
 *
 * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without
 *   any inputs or parameters causes the wizard to use the default "strict" navigation mode equivalent to
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ````
 */
let NavigationModeDirective = class NavigationModeDirective {
    constructor(wizard) {
        this.wizard = wizard;
    }
    ngOnChanges(changes) {
        this.wizard.navigation = this.getNavigationMode();
    }
    getNavigationMode() {
        if (this.awNavigationMode) {
            return this.awNavigationMode;
        }
        return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);
    }
};
NavigationModeDirective.ctorParameters = () => [
    { type: WizardComponent }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NavigationModeDirective.prototype, "awNavigationMode", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NavigationModeDirective.prototype, "navigateBackward", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NavigationModeDirective.prototype, "navigateForward", void 0);
NavigationModeDirective = __decorate([
    Directive({
        selector: '[awNavigationMode]',
    }),
    __metadata("design:paramtypes", [WizardComponent])
], NavigationModeDirective);
export { NavigationModeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1tb2RlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYXJjaHdpemFyZC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL25hdmlnYXRpb24tbW9kZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQUd6RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUN0RixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFHL0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Q0c7QUFJSCxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtJQTJCbEMsWUFBb0IsTUFBdUI7UUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFBSSxDQUFDO0lBRXpDLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQzlCO1FBQ0QsT0FBTyxJQUFJLDBCQUEwQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUVGLENBQUE7O1lBYjZCLGVBQWU7O0FBckIzQztJQURDLEtBQUssRUFBRTs7aUVBQ3FDO0FBUzdDO0lBREMsS0FBSyxFQUFFOztpRUFDcUM7QUFVN0M7SUFEQyxLQUFLLEVBQUU7O2dFQUM4QztBQXpCM0MsdUJBQXVCO0lBSG5DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7S0FDL0IsQ0FBQztxQ0E0QjRCLGVBQWU7R0EzQmhDLHVCQUF1QixDQXdDbkM7U0F4Q1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge05hdmlnYXRpb25Nb2RlfSBmcm9tICcuLi9uYXZpZ2F0aW9uL25hdmlnYXRpb24tbW9kZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHtDb25maWd1cmFibGVOYXZpZ2F0aW9uTW9kZX0gZnJvbSAnLi4vbmF2aWdhdGlvbi9jb25maWd1cmFibGUtbmF2aWdhdGlvbi1tb2RlJztcbmltcG9ydCB7V2l6YXJkQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL3dpemFyZC5jb21wb25lbnQnO1xuXG5cbi8qKlxuICogVGhlIFtbYXdOYXZpZ2F0aW9uTW9kZV1dIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgd2l6YXJkJ2QgbmF2aWdhdGlvbiBtb2RlLlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHVzYWdlIG9wdGlvbnM6XG4gKlxuICogIyMjIE9wdGlvbiAxLiBDdXN0b21pemUgdGhlIGRlZmF1bHQgbmF2aWdhdGlvbiBtb2RlIHdpdGggW1tuYXZpZ2F0ZUJhY2t3YXJkXV0gYW5kL29yIFtbbmF2aWdhdGVGb3J3YXJkXV0gaW5wdXRzLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQgW2F3TmF2aWdhdGlvbk1vZGVdIG5hdmlnYXRlQmFja3dhcmQ9XCJkZW55XCIgbmF2aWdhdGVGb3J3YXJkPVwiYWxsb3dcIj4uLi48L2F3LXdpemFyZD5cbiAqIGBgYFxuICpcbiAqICMjIyBPcHRpb24gMi4gUGFzcyBpbiBhIGN1c3RvbSBuYXZpZ2F0aW9uIG1vZGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlTmF2aWdhdGlvbk1vZGUgfSBmcm9tICdhbmd1bGFyLWFyY2h3aXphcmQnXG4gKlxuICogY2xhc3MgQ3VzdG9tTmF2aWdhdGlvbk1vZGUgZXh0ZW5kcyBCYXNlTmF2aWdhdGlvbk1vZGUge1xuICpcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBAQ29tcG9uZW50KHtcbiAqICAgLy8gLi4uXG4gKiB9KVxuICogY2xhc3MgTXlDb21wb25lbnQge1xuICpcbiAqICAgbmF2aWdhdGlvbk1vZGUgPSBuZXcgQ3VzdG9tTmF2aWdhdGlvbk1vZGUoKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQgW2F3TmF2aWdhdGlvbk1vZGVdPVwibmF2aWdhdGlvbk1vZGVcIj4uLi48L2F3LXdpemFyZD5cbiAqIGBgYFxuICpcbiAqICMjIyBBZGRpdGlvbmFsIE5vdGVzXG4gKlxuICogLSBTcGVjaWZ5aW5nIGEgY3VzdG9tIG5hdmlnYXRpb24gbW9kZSB0YWtlcyBwcmlvcml0eSBvdmVyIFtbbmF2aWdhdGVCYWNrd2FyZF1dIGFuZCBbW25hdmlnYXRlRm9yd2FyZF1dIGlucHV0c1xuICpcbiAqIC0gT21pdHRpbmcgdGhlIFtbYXdOYXZpZ2F0aW9uTW9kZV1dIGRpcmVjdGl2ZSBvciwgZXF1YWxseSwgc3BlY2lmeWluZyBqdXN0IFtbYXdOYXZpZ2F0aW9uTW9kZV1dIHdpdGhvdXRcbiAqICAgYW55IGlucHV0cyBvciBwYXJhbWV0ZXJzIGNhdXNlcyB0aGUgd2l6YXJkIHRvIHVzZSB0aGUgZGVmYXVsdCBcInN0cmljdFwiIG5hdmlnYXRpb24gbW9kZSBlcXVpdmFsZW50IHRvXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZCBbYXdOYXZpZ2F0aW9uTW9kZV0gbmF2aWdhdGVCYWNrd2FyZD1cImRlbnlcIiBuYXZpZ2F0ZUZvcndhcmQ9XCJhbGxvd1wiPi4uLjwvYXctd2l6YXJkPlxuICogYGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYXdOYXZpZ2F0aW9uTW9kZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBuYXZpZ2F0aW9uIG1vZGUgaW5zdGFuY2UgKG9wdGlvbmFsKS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBhd05hdmlnYXRpb25Nb2RlOiBOYXZpZ2F0aW9uTW9kZXxudWxsO1xuXG4gIC8qKlxuICAgKiBBIHBhcmFtZXRlciBmb3IgdGhlIGRlZmF1bHQgbmF2aWdhdGlvbiBtb2RlLiAgQ29udHJvbHMgd2hldGhlciB3aXphcmQgc3RlcHMgYmVmb3JlIHRoZSBjdXJyZW50IHN0ZXAgYXJlIG5hdmlnYWJsZTpcbiAgICpcbiAgICogLSBgbmF2aWdhdGVCYWNrd2FyZD1cImRlbnlcImAgLS0gdGhlIHN0ZXBzIGFyZSBub3QgbmF2aWdhYmxlXG4gICAqIC0gYG5hdmlnYXRlQmFja3dhcmQ9XCJhbGxvd1wiYCAtLSB0aGUgc3RlcHMgYXJlIG5hdmlnYWJsZVxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIG5hdmlnYXRlQmFja3dhcmQ6ICdhbGxvdyd8J2RlbnknfG51bGw7XG5cbiAgLyoqXG4gICAqIEEgcGFyYW1ldGVyIGZvciB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIG1vZGUuICBDb250cm9scyB3aGV0aGVyIHdpemFyZCBzdGVwcyBhZnRlciB0aGUgY3VycmVudCBzdGVwIGFyZSBuYXZpZ2FibGU6XG4gICAqXG4gICAqIC0gYG5hdmlnYXRlRm9yd2FyZD1cImRlbnlcImAgLS0gdGhlIHN0ZXBzIGFyZSBub3QgbmF2aWdhYmxlXG4gICAqIC0gYG5hdmlnYXRlRm9yd2FyZD1cImFsbG93XCJgIC0tIHRoZSBzdGVwcyBhcmUgbmF2aWdhYmxlXG4gICAqIC0gYG5hdmlnYXRlRm9yd2FyZD1cInZpc2l0ZWRcImAgLS0gYSBzdGVwIGlzIG5hdmlnYWJsZSBpZmYgaXQgd2FzIGFscmVhZHkgdmlzaXRlZCBiZWZvcmVcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBuYXZpZ2F0ZUZvcndhcmQ6ICdhbGxvdyd8J2RlbnknfCd2aXNpdGVkJ3xudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgd2l6YXJkOiBXaXphcmRDb21wb25lbnQpIHsgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy53aXphcmQubmF2aWdhdGlvbiA9IHRoaXMuZ2V0TmF2aWdhdGlvbk1vZGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmF2aWdhdGlvbk1vZGUoKTogTmF2aWdhdGlvbk1vZGUge1xuICAgIGlmICh0aGlzLmF3TmF2aWdhdGlvbk1vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmF3TmF2aWdhdGlvbk1vZGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ29uZmlndXJhYmxlTmF2aWdhdGlvbk1vZGUodGhpcy5uYXZpZ2F0ZUJhY2t3YXJkLCB0aGlzLm5hdmlnYXRlRm9yd2FyZCk7XG4gIH1cblxufVxuIl19