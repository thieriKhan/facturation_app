import { __decorate, __metadata, __param } from "tslib";
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awOptionalStep` directive can be used to define an optional `wizard-step`.
 * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awOptionalStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="Second step" awOptionalStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * @author Marc Arndt
 */
import * as ɵngcc0 from '@angular/core';
let OptionalStepDirective = class OptionalStepDirective {
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]
     */
    constructor(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.optional = true;
    }
    /**
     * Initialization work
     */
    ngOnInit() {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.optional = this.optional || this.optional === '';
    }
};
OptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) { return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };
OptionalStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OptionalStepDirective, selectors: [["", "awOptionalStep", ""]], inputs: { optional: ["awOptionalStep", "optional"] } });
OptionalStepDirective.ctorParameters = () => [
    { type: WizardStep, decorators: [{ type: Host }] }
];
__decorate([
    Input('awOptionalStep'),
    __metadata("design:type", Object)
], OptionalStepDirective.prototype, "optional", void 0);
OptionalStepDirective = __decorate([ __param(0, Host()),
    __metadata("design:paramtypes", [WizardStep])
], OptionalStepDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awOptionalStep]'
            }]
    }], function () { return [{ type: WizardStep, decorators: [{
                type: Host
            }] }]; }, { optional: [{
            type: Input,
            args: ['awOptionalStep']
        }] }); })();
export { OptionalStepDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uYWwtc3RlcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWFyY2h3aXphcmQvbGliL2RpcmVjdGl2ZXMvb3B0aW9uYWwtc3RlcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFJSCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtBQUFHLElBTW5DO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsWUFBNEIsVUFBc0I7QUFDcEQsUUFEOEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBVG5ELDJDQUEyQztBQUM3QyxRQUNTLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDekIsSUFPRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQVMsUUFBUTtBQUFLLFFBQ2xCLHlIQUF5SDtBQUM3SCxRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQWUsS0FBSyxFQUFFLENBQUM7QUFDNUUsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7c0xBQUE7QUFDRDtBQUErQyxZQVhMLFVBQVUsdUJBQXJDLElBQUk7QUFBTTtBQVB2QjtBQUFhLElBRFosS0FBSyxDQUFDLGdCQUFnQixDQUFDO0FBQ3pCO0FBR0ssdURBSG1CO0FBSloscUJBQXFCLG9CQUhqQyxTQUFTLENBQUMsZkFHUCxDQVdXLFdBQUEsSUFBSSxFQUFFLENBQUE7SUFibkIsUUFBUSxFQUFFLGtCQUFrQixNQUM3QixDQUFDLHZDQVlxQixxQ0FBbUIsVUFBVTtBQUFHLEdBWDFDLHFCQUFxQixDQXFCakM7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0F0QlkscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dpemFyZFN0ZXB9IGZyb20gJy4uL3V0aWwvd2l6YXJkLXN0ZXAuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBUaGUgYGF3T3B0aW9uYWxTdGVwYCBkaXJlY3RpdmUgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIGFuIG9wdGlvbmFsIGB3aXphcmQtc3RlcGAuXG4gKiBBbiBvcHRpb25hbCB3aXphcmQgc3RlcCBpcyBhIFtbV2l6YXJkU3RlcF1dIHRoYXQgZG9lc24ndCBuZWVkIHRvIGJlIGNvbXBsZXRlZCB0byB0cmFuc2l0aW9uIHRvIGxhdGVyIHdpemFyZCBzdGVwcy5cbiAqXG4gKiAjIyMgU3ludGF4XG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1zdGVwIGF3T3B0aW9uYWxTdGVwPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1zdGVwIHN0ZXBUaXRsZT1cIlNlY29uZCBzdGVwXCIgYXdPcHRpb25hbFN0ZXA+XG4gKiAgICAgLi4uXG4gKiA8L2F3LXdpemFyZC1zdGVwPlxuICogYGBgXG4gKlxuICogQGF1dGhvciBNYXJjIEFybmR0XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thd09wdGlvbmFsU3RlcF0nXG59KVxuZXhwb3J0IGNsYXNzIE9wdGlvbmFsU3RlcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2F3T3B0aW9uYWxTdGVwJylcbiAgcHVibGljIG9wdGlvbmFsID0gdHJ1ZTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwLCB3aGljaCBjb250YWlucyB0aGlzIFtbT3B0aW9uYWxTdGVwRGlyZWN0aXZlXV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHJpdmF0ZSB3aXphcmRTdGVwOiBXaXphcmRTdGVwKSB7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6YXRpb24gd29ya1xuICAgKi9cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIC8vIFRoZSBpbnB1dCByZWNlaXZlcyAnJyB3aGVuIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUgd2l0aG91dCBhIHZhbHVlLiAgSW4gdGhpcyBjYXNlLCBhcHBseSB0aGUgZGVmYXVsdCB2YWx1ZSAoYHRydWVgKS5cbiAgICB0aGlzLndpemFyZFN0ZXAub3B0aW9uYWwgPSB0aGlzLm9wdGlvbmFsIHx8IHRoaXMub3B0aW9uYWwgYXMgYW55ID09PSAnJztcbiAgfVxufVxuIl19