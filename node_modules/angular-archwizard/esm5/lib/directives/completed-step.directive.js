import { __decorate, __metadata, __param } from "tslib";
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
var CompletedStepDirective = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    function CompletedStepDirective(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.initiallyCompleted = true;
    }
    /**
     * Initialization work
     */
    CompletedStepDirective.prototype.ngOnInit = function () {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';
    };
    CompletedStepDirective.ctorParameters = function () { return [
        { type: WizardStep, decorators: [{ type: Host }] }
    ]; };
    __decorate([
        Input('awCompletedStep'),
        __metadata("design:type", Object)
    ], CompletedStepDirective.prototype, "initiallyCompleted", void 0);
    CompletedStepDirective = __decorate([ __param(0, Host()),
        __metadata("design:paramtypes", [WizardStep])
    ], CompletedStepDirective);
CompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };
CompletedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [["", "awCompletedStep", ""]], inputs: { initiallyCompleted: ["awCompletedStep", "initiallyCompleted"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awCompletedStep]'
            }]
    }], function () { return [{ type: WizardStep, decorators: [{
                type: Host
            }] }]; }, { initiallyCompleted: [{
            type: Input,
            args: ['awCompletedStep']
        }] }); })();
    return CompletedStepDirective;
}());
export { CompletedStepDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhci1hcmNod2l6YXJkL2xpYi9kaXJlY3RpdmVzL2NvbXBsZXRlZC1zdGVwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUlIO0FBRUMsSUFJQztBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFFLGdDQUE0QixVQUFzQjtBQUNwRCxRQUQ4QixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFUbkQsMkNBQTJDO0FBQzdDLFFBQ1MsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLElBT0UsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFTLHlDQUFRLEdBQWY7QUFBYyxRQUNaLHlIQUF5SDtBQUM3SCxRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxrQkFBeUIsS0FBSyxFQUFFLENBQUM7QUFDMUcsSUFBRSxDQUFDO0FBQ0Y7QUFDaUUsZ0JBWHhCLFVBQVUsdUJBQXJDLElBQUk7QUFBTTtBQUFVLElBUGpDO0FBQWEsUUFEWixLQUFLLENBQUMsaUJBQWlCLENBQUM7QUFDMUI7QUFHRCxzRUFIbUM7QUFFbkMsSUFOYSxzQkFBc0Isd0JBSGxDLFNBQVMsQ0FBQyxuQkFHSCxDQVdPLFdBQUEsSUFBSSxFQUFFLENBQUE7WUFibkIsUUFBUSxFQUFFLG1CQUFtQixVQUM5QixDQUFDLHBEQVlxQix5Q0FBbUIsVUFBVTtBQUFHLE9BWDFDLHNCQUFzQixDQXFCbEM7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQXJCRCxJQXFCQztBQUNELFNBdEJhLHNCQUFzQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3QsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1dpemFyZFN0ZXB9IGZyb20gJy4uL3V0aWwvd2l6YXJkLXN0ZXAuaW50ZXJmYWNlJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYGF3Q29tcGxldGVkU3RlcGAgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIG1ha2UgYSB3aXphcmQgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkLlxyXG4gKlxyXG4gKiBJbml0aWFsbHkgY29tcGxldGVkIHN0ZXBzIGFyZSBzaG93biBhcyBjb21wbGV0ZWQgd2hlbiB0aGUgd2l6YXJkIGlzIHByZXNlbnRlZCB0byB0aGUgdXNlci5cclxuICpcclxuICogQSB0eXBpY2FsIHVzZSBjYXNlIGlzIHRvIG1ha2UgYSBzdGVwIGluaXRpYWxseSBjb21wbGV0ZWQgaWYgaXQgaXMgYXV0b21hdGljYWxseSBmaWxsZWQgd2l0aCBzb21lIGRlcml2ZWQvcHJlZGVmaW5lZCBpbmZvcm1hdGlvbi5cclxuICpcclxuICogIyMjIFN5bnRheFxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxhdy13aXphcmQtc3RlcCBhd0NvbXBsZXRlZFN0ZXA+XHJcbiAqICAgICAuLi5cclxuICogPC9hdy13aXphcmQtc3RlcD5cclxuICogYGBgXHJcbiAqXHJcbiAqIEFuIG9wdGlvbmFsIGJvb2xlYW4gY29uZGl0aW9uIGNhbiBiZSBzcGVjaWZpZWQ6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGF3LXdpemFyZC1zdGVwIFthd0NvbXBsZXRlZFN0ZXBdPVwic2hvdWxkQmVDb21wbGV0ZWRcIj5cclxuICogICAgIC4uLlxyXG4gKiA8L2F3LXdpemFyZC1zdGVwPlxyXG4gKiBgYGBcclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8YXctd2l6YXJkLXN0ZXAgc3RlcFRpdGxlPVwiRmlyc3Qgc3RlcFwiIFthd0NvbXBsZXRlZFN0ZXBdPVwiZmlyc3RTdGVwUHJlZmlsbGVkXCI+XHJcbiAqICAgICAuLi5cclxuICogPC9hdy13aXphcmQtc3RlcD5cclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thd0NvbXBsZXRlZFN0ZXBdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29tcGxldGVkU3RlcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcclxuICBASW5wdXQoJ2F3Q29tcGxldGVkU3RlcCcpXHJcbiAgcHVibGljIGluaXRpYWxseUNvbXBsZXRlZCA9IHRydWU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yXHJcbiAgICpcclxuICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAsIHdoaWNoIGNvbnRhaW5zIHRoaXMgW1tDb21wbGV0ZWRTdGVwRGlyZWN0aXZlXV1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihASG9zdCgpIHByaXZhdGUgd2l6YXJkU3RlcDogV2l6YXJkU3RlcCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6YXRpb24gd29ya1xyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIC8vIFRoZSBpbnB1dCByZWNlaXZlcyAnJyB3aGVuIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUgd2l0aG91dCBhIHZhbHVlLiAgSW4gdGhpcyBjYXNlLCBhcHBseSB0aGUgZGVmYXVsdCB2YWx1ZSAoYHRydWVgKS5cclxuICAgIHRoaXMud2l6YXJkU3RlcC5pbml0aWFsbHlDb21wbGV0ZWQgPSB0aGlzLmluaXRpYWxseUNvbXBsZXRlZCB8fCB0aGlzLmluaXRpYWxseUNvbXBsZXRlZCBhcyBhbnkgPT09ICcnO1xyXG4gIH1cclxufVxyXG4iXX0=