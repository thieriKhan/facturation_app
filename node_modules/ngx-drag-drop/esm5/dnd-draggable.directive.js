/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgZone, Output, Renderer2 } from "@angular/core";
import { calculateDragImageOffset, setDragData, setDragImage } from "./dnd-utils";
import { dndState, endDrag, startDrag } from "./dnd-state";
import * as ɵngcc0 from '@angular/core';
var DndDragImageRefDirective = /** @class */ (function () {
    function DndDragImageRefDirective(parent, elementRef) {
        parent.registerDragImage(elementRef);
    }
    /** @nocollapse */
    DndDragImageRefDirective.ctorParameters = function () { return [
        { type: DndDraggableDirective },
        { type: ElementRef }
    ]; };
DndDragImageRefDirective.ɵfac = function DndDragImageRefDirective_Factory(t) { return new (t || DndDragImageRefDirective)(ɵngcc0.ɵɵdirectiveInject(DndDraggableDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DndDragImageRefDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DndDragImageRefDirective, selectors: [["", "dndDragImageRef", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DndDragImageRefDirective, [{
        type: Directive,
        args: [{
                selector: "[dndDragImageRef]"
            }]
    }], function () { return [{ type: DndDraggableDirective }, { type: ɵngcc0.ElementRef }]; }, null); })();
    return DndDragImageRefDirective;
}());
export { DndDragImageRefDirective };
var DndDraggableDirective = /** @class */ (function () {
    function DndDraggableDirective(elementRef, renderer, ngZone) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.dndEffectAllowed = "copy";
        this.dndDraggingClass = "dndDragging";
        this.dndDraggingSourceClass = "dndDraggingSource";
        this.dndDraggableDisabledClass = "dndDraggableDisabled";
        this.dndDragImageOffsetFunction = calculateDragImageOffset;
        this.dndStart = new EventEmitter();
        this.dndDrag = new EventEmitter();
        this.dndEnd = new EventEmitter();
        this.dndMoved = new EventEmitter();
        this.dndCopied = new EventEmitter();
        this.dndLinked = new EventEmitter();
        this.dndCanceled = new EventEmitter();
        this.draggable = true;
        this.isDragStarted = false;
        this.dragEventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onDrag(event); });
    }
    Object.defineProperty(DndDraggableDirective.prototype, "dndDisableIf", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.draggable = !value;
            if (this.draggable) {
                this.renderer.removeClass(this.elementRef.nativeElement, this.dndDraggableDisabledClass);
            }
            else {
                this.renderer.addClass(this.elementRef.nativeElement, this.dndDraggableDisabledClass);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DndDraggableDirective.prototype, "dndDisableDragIf", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dndDisableIf = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DndDraggableDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.elementRef.nativeElement.addEventListener("drag", _this.dragEventHandler);
        }));
    };
    /**
     * @return {?}
     */
    DndDraggableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.removeEventListener("drag", this.dragEventHandler);
        if (this.isDragStarted === true) {
            endDrag();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.onDragStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.draggable === false) {
            return false;
        }
        // check if there is dnd handle and if the dnd handle was used to start the drag
        if (typeof this.dndHandle !== "undefined"
            && typeof event._dndUsingHandle === "undefined") {
            return false;
        }
        // initialize global state
        startDrag(event, this.dndEffectAllowed, this.dndType);
        this.isDragStarted = true;
        setDragData(event, { data: this.dndDraggable, type: this.dndType }, dndState.effectAllowed);
        this.dragImage = this.determineDragImage();
        // set dragging css class prior to setDragImage so styles are applied before
        // TODO breaking change: add class to elementRef rather than drag image which could be another element
        this.renderer.addClass(this.dragImage, this.dndDraggingClass);
        // set custom dragimage if present
        // set dragimage if drag is started from dndHandle
        if (typeof this.dndDragImageElementRef !== "undefined"
            || typeof event._dndUsingHandle !== "undefined") {
            setDragImage(event, this.dragImage, this.dndDragImageOffsetFunction);
        }
        // add dragging source css class on first drag event
        /** @type {?} */
        var unregister = this.renderer.listen(this.elementRef.nativeElement, "drag", (/**
         * @return {?}
         */
        function () {
            _this.renderer.addClass(_this.elementRef.nativeElement, _this.dndDraggingSourceClass);
            unregister();
        }));
        this.dndStart.emit(event);
        event.stopPropagation();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.onDrag = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dndDrag.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DndDraggableDirective.prototype.onDragEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // get drop effect from custom stored state as its not reliable across browsers
        /** @type {?} */
        var dropEffect = dndState.dropEffect;
        /** @type {?} */
        var dropEffectEmitter;
        switch (dropEffect) {
            case "copy":
                dropEffectEmitter = this.dndCopied;
                break;
            case "link":
                dropEffectEmitter = this.dndLinked;
                break;
            case "move":
                dropEffectEmitter = this.dndMoved;
                break;
            default:
                dropEffectEmitter = this.dndCanceled;
                break;
        }
        dropEffectEmitter.emit(event);
        this.dndEnd.emit(event);
        // reset global state
        endDrag();
        this.isDragStarted = false;
        this.renderer.removeClass(this.dragImage, this.dndDraggingClass);
        // IE9 special hammering
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.renderer.removeClass(_this.elementRef.nativeElement, _this.dndDraggingSourceClass);
        }), 0);
        event.stopPropagation();
    };
    /**
     * @param {?} handle
     * @return {?}
     */
    DndDraggableDirective.prototype.registerDragHandle = /**
     * @param {?} handle
     * @return {?}
     */
    function (handle) {
        this.dndHandle = handle;
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DndDraggableDirective.prototype.registerDragImage = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        this.dndDragImageElementRef = elementRef;
    };
    /**
     * @private
     * @return {?}
     */
    DndDraggableDirective.prototype.determineDragImage = /**
     * @private
     * @return {?}
     */
    function () {
        // evaluate custom drag image existence
        if (typeof this.dndDragImageElementRef !== "undefined") {
            return (/** @type {?} */ (this.dndDragImageElementRef.nativeElement));
        }
        else {
            return this.elementRef.nativeElement;
        }
    };
    /** @nocollapse */
    DndDraggableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    DndDraggableDirective.propDecorators = {
        dndDraggable: [{ type: Input }],
        dndEffectAllowed: [{ type: Input }],
        dndType: [{ type: Input }],
        dndDraggingClass: [{ type: Input }],
        dndDraggingSourceClass: [{ type: Input }],
        dndDraggableDisabledClass: [{ type: Input }],
        dndDragImageOffsetFunction: [{ type: Input }],
        dndStart: [{ type: Output }],
        dndDrag: [{ type: Output }],
        dndEnd: [{ type: Output }],
        dndMoved: [{ type: Output }],
        dndCopied: [{ type: Output }],
        dndLinked: [{ type: Output }],
        dndCanceled: [{ type: Output }],
        draggable: [{ type: HostBinding, args: ["attr.draggable",] }],
        dndDisableIf: [{ type: Input }],
        dndDisableDragIf: [{ type: Input }],
        onDragStart: [{ type: HostListener, args: ["dragstart", ["$event"],] }],
        onDragEnd: [{ type: HostListener, args: ["dragend", ["$event"],] }]
    };
DndDraggableDirective.ɵfac = function DndDraggableDirective_Factory(t) { return new (t || DndDraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DndDraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DndDraggableDirective, selectors: [["", "dndDraggable", ""]], hostVars: 1, hostBindings: function DndDraggableDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dragstart", function DndDraggableDirective_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })("dragend", function DndDraggableDirective_dragend_HostBindingHandler($event) { return ctx.onDragEnd($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("draggable", ctx.draggable);
    } }, inputs: { dndEffectAllowed: "dndEffectAllowed", dndDraggingClass: "dndDraggingClass", dndDraggingSourceClass: "dndDraggingSourceClass", dndDraggableDisabledClass: "dndDraggableDisabledClass", dndDragImageOffsetFunction: "dndDragImageOffsetFunction", dndDisableIf: "dndDisableIf", dndDisableDragIf: "dndDisableDragIf", dndDraggable: "dndDraggable", dndType: "dndType" }, outputs: { dndStart: "dndStart", dndDrag: "dndDrag", dndEnd: "dndEnd", dndMoved: "dndMoved", dndCopied: "dndCopied", dndLinked: "dndLinked", dndCanceled: "dndCanceled" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DndDraggableDirective, [{
        type: Directive,
        args: [{
                selector: "[dndDraggable]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { dndEffectAllowed: [{
            type: Input
        }], dndDraggingClass: [{
            type: Input
        }], dndDraggingSourceClass: [{
            type: Input
        }], dndDraggableDisabledClass: [{
            type: Input
        }], dndDragImageOffsetFunction: [{
            type: Input
        }], dndStart: [{
            type: Output
        }], dndDrag: [{
            type: Output
        }], dndEnd: [{
            type: Output
        }], dndMoved: [{
            type: Output
        }], dndCopied: [{
            type: Output
        }], dndLinked: [{
            type: Output
        }], dndCanceled: [{
            type: Output
        }], draggable: [{
            type: HostBinding,
            args: ["attr.draggable"]
        }], dndDisableIf: [{
            type: Input
        }], dndDisableDragIf: [{
            type: Input
        }], onDragStart: [{
            type: HostListener,
            args: ["dragstart", ["$event"]]
        }], onDragEnd: [{
            type: HostListener,
            args: ["dragend", ["$event"]]
        }], dndDraggable: [{
            type: Input
        }], dndType: [{
            type: Input
        }] }); })();
    return DndDraggableDirective;
}());
export { DndDraggableDirective };
if (false) {
    /** @type {?} */
    DndDraggableDirective.prototype.dndDraggable;
    /** @type {?} */
    DndDraggableDirective.prototype.dndEffectAllowed;
    /** @type {?} */
    DndDraggableDirective.prototype.dndType;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDraggingClass;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDraggingSourceClass;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDraggableDisabledClass;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDragImageOffsetFunction;
    /** @type {?} */
    DndDraggableDirective.prototype.dndStart;
    /** @type {?} */
    DndDraggableDirective.prototype.dndDrag;
    /** @type {?} */
    DndDraggableDirective.prototype.dndEnd;
    /** @type {?} */
    DndDraggableDirective.prototype.dndMoved;
    /** @type {?} */
    DndDraggableDirective.prototype.dndCopied;
    /** @type {?} */
    DndDraggableDirective.prototype.dndLinked;
    /** @type {?} */
    DndDraggableDirective.prototype.dndCanceled;
    /** @type {?} */
    DndDraggableDirective.prototype.draggable;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.dndHandle;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.dndDragImageElementRef;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.dragImage;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.isDragStarted;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.dragEventHandler;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    DndDraggableDirective.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,